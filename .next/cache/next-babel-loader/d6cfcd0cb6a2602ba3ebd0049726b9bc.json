{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nvar capitalize = function capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.toLowerCase().slice(1);\n};\n\nvar parseCn = function parseCn(str) {\n  return str === 'usa' || str === 'Usa' || str === 'United States' ? 'USA' : str === 'Uk' || str === 'England' || str === 'United Kingdom' || str == 'great britain' ? 'UK' : str.toLowerCase();\n};\n\nfunction getCountry(list) {\n  return function (queryCountry) {\n    return list.reduce(function (a, c) {\n      return c.country === queryCountry ? c : a;\n    }, {});\n  };\n}\n\nfunction currentCountry() {\n  return _regeneratorRuntime.async(function currentCountry$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(axios.get('https://extreme-ip-lookup.com/json/').then(function (res) {\n            return res.data.country;\n          })[\"catch\"](function (e) {\n            return 'israel';\n          }));\n\n        case 2:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction useTodayStats(url, country) {\n  var _useState = useState(),\n      todayStats = _useState[0],\n      setStats = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      error = _useState3[0],\n      setError = _useState3[1];\n\n  useEffect(function () {\n    function fetchData() {\n      var _ref, nnum, searchCountry, parsedCountry, URL, _ref2, data, relevant;\n\n      return _regeneratorRuntime.async(function fetchData$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(axios.get('https://corona.lmao.ninja/countries/israel?yesterday=true'));\n\n            case 2:\n              _ref = _context2.sent;\n              nnum = _ref.nnum;\n              console.log(nnum);\n              setLoading(true);\n              setError();\n              _context2.t0 = country;\n\n              if (_context2.t0) {\n                _context2.next = 12;\n                break;\n              }\n\n              _context2.next = 11;\n              return _regeneratorRuntime.awrap(currentCountry());\n\n            case 11:\n              _context2.t0 = _context2.sent;\n\n            case 12:\n              searchCountry = _context2.t0;\n              parsedCountry = parseCn(searchCountry);\n              URL = url + 'today/' + parsedCountry.toLowerCase(); // const URL = url + (country === 'world' ? '' : searchCountry)\n\n              _context2.prev = 15;\n              _context2.next = 18;\n              return _regeneratorRuntime.awrap(axios.get(URL));\n\n            case 18:\n              _ref2 = _context2.sent;\n              data = _ref2.data;\n              relevant = {\n                active: data.active,\n                cases: data.cases,\n                todayCases: data.todayCases,\n                recovered: data.recovered,\n                deaths: data.deaths,\n                country: data.country\n              };\n              setStats(relevant);\n              setLoading(false);\n              _context2.next = 28;\n              break;\n\n            case 25:\n              _context2.prev = 25;\n              _context2.t1 = _context2[\"catch\"](15);\n              setError(_context2.t1);\n\n            case 28:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[15, 25]], Promise);\n    }\n\n    fetchData();\n  }, [country]);\n  return {\n    todayStats: todayStats,\n    loading: loading,\n    error: error\n  };\n}\n\nexport default useTodayStats;","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/utils/useTodayStats.js"],"names":["useState","useEffect","axios","capitalize","str","charAt","toUpperCase","toLowerCase","slice","parseCn","getCountry","list","queryCountry","reduce","a","c","country","currentCountry","get","then","res","data","e","useTodayStats","url","todayStats","setStats","loading","setLoading","error","setError","fetchData","nnum","console","log","searchCountry","parsedCountry","URL","relevant","active","cases","todayCases","recovered","deaths"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport axios from 'axios'\n\n\n\nconst capitalize = str => str.charAt(0).toUpperCase() + str.toLowerCase().slice(1)\nconst parseCn = str => {\n  return str === 'usa' || str === 'Usa' || str === 'United States'\n    ? 'USA' \n      : str === 'Uk' || str === 'England' || str === 'United Kingdom' || str == 'great britain'\n    ? 'UK' \n    : str.toLowerCase();\n}\n\nfunction getCountry(list){\n  return function(queryCountry) {\n    return list.reduce((a,c) => c.country === queryCountry ? c : a, {})\n  }\n}\n\nasync function currentCountry(){\n  return await axios\n    .get('https://extreme-ip-lookup.com/json/')\n    .then(res => res.data.country)\n    .catch(e => 'israel')\n}\n\nfunction useTodayStats(url, country) {\n  const [todayStats, setStats] = useState();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n\n    async function fetchData() {\n\n      const { nnum } = await axios.get('https://corona.lmao.ninja/countries/israel?yesterday=true')\n      console.log(nnum);\n      setLoading(true)\n      setError()\n      let searchCountry = country || await currentCountry();\n\n      const parsedCountry = parseCn(searchCountry);\n      const URL = url + 'today/' + parsedCountry.toLowerCase()\n      // const URL = url + (country === 'world' ? '' : searchCountry)\n      try {\n        // const data = await fetch(URL)\n        //     .then(res => res.json())\n        //     .catch(err => setError(err))\n        const { data } = await axios.get(URL)\n        const relevant = {\n          active: data.active,\n          cases: data.cases,\n          todayCases: data.todayCases,\n          recovered: data.recovered,\n          deaths: data.deaths,\n          country: data.country\n        }\n        setStats(relevant)\n        setLoading(false)\n       } catch(e) {\n        setError(e)\n      }\n    }\n    fetchData();\n  }, [country])\n  return {\n    todayStats, loading, error\n  }\n}\n\nexport default useTodayStats;\n"]},"metadata":{},"sourceType":"module"}