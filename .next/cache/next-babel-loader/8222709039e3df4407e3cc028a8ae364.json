{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _noChartDisplaySettin;\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Line, defaults } from 'react-chartjs-2';\nimport { useRef } from 'react';\nimport 'chartjs-plugin-datalabels';\nimport styled, { withTheme, keyframes } from 'styled-components';\nimport { FadeIn } from './S';\nimport useMobileDetect from '../utils/isMobile';\nimport useTranslation from '../hooks/useTranslation';\ndefaults.global.defaultFontFamily = \"'PT Sans', sans-serif\";\nvar Div = styled.div.withConfig({\n  displayName: \"LineChart__Div\",\n  componentId: \"sc-9esmyi-0\"\n})([\"margin-top:32px;margin-left:auto;margin-right:auto;margin-bottom:48px;height:375px;text-align:center;width:80%;direction:rtl;> *{direction:rtl;}h1{text-shadow:\", \";}canvas{border-radius:8px;}@media (max-width:560px){height:40vh;margin-bottom:48px;width:100vw;max-width:100%;}\"], function (_ref) {\n  var theme = _ref.theme;\n  return theme.shadows[1];\n});\nvar noChartDisplaySettings = (_noChartDisplaySettin = {\n  // backgroundColor: 'transparent',\n  // strokeColor: 'transparent',\n  // borderColor: 'transparent',\n  showLine: false,\n  borderWidth: 0,\n  pointHitRadius: 0,\n  pointHoverRadius: 0,\n  pointHoverBorderWidth: 0,\n  pointRadius: 0\n}, _defineProperty(_noChartDisplaySettin, \"pointHitRadius\", 0), _defineProperty(_noChartDisplaySettin, \"fill\", false), _noChartDisplaySettin); // if mobile, do by 8, if not do by 3\n\nvar LineChart = function LineChart(props, _ref2) {\n  var theme = _ref2.theme;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var chartRef = useRef();\n\n  var showLastMonth = function showLastMonth(arr) {\n    return arr.slice(Math.ceil(arr.length / 3.3));\n  };\n\n  var filterBy5 = function filterBy5(x, i) {\n    return useMobileDetect().isMobile() ? !(i % 8) : !(i % 2);\n  }; // const subtractArray = arr => arr.filter(filterBy5).concat(arr[arr.length -1])\n\n\n  var subtractArray = function subtractArray(arr) {\n    return showLastMonth(arr);\n  };\n\n  var cutCaseCount = function cutCaseCount(_ref3) {\n    var data = _ref3.data;\n    return data.length > 30 ? subtractArray(data) : data;\n  };\n\n  var displayOnChart = function displayOnChart(dset) {\n    return _objectSpread({}, dset, {\n      label: t(dset.label, 'chartLabels'),\n      data: cutCaseCount(dset),\n      fill: true\n    });\n  };\n\n  var dontDisplayOnChart = function dontDisplayOnChart(dset) {\n    return _objectSpread({}, dset, {\n      label: t(dset.label, 'chartLabels'),\n      data: cutCaseCount(dset)\n    }, noChartDisplaySettings);\n  };\n\n  var parseDatasets = function parseDatasets(arrayOfSets, fill) {\n    return arrayOfSets.map(sortForDisplay);\n  };\n\n  var sortForDisplay = function sortForDisplay(dset) {\n    return dset.label !== 'cases' && dset.label !== 'נדבקים' ? dontDisplayOnChart(dset) : displayOnChart(dset);\n  };\n\n  var data2 = {\n    labels: props.labels.length > 30 ? subtractArray(props.labels) : props.labels,\n    datasets: parseDatasets(props.data, props.fill)\n  };\n\n  var data = function data(canvas) {\n    var ctx = canvas.getContext('2d');\n    var gradient = ctx.createLinearGradient(0, 0, 0, 400);\n    gradient.addColorStop(0, props.theme.primaryColor);\n    gradient.addColorStop(1, 'rgba(184,40,50,0.45)');\n    data2.datasets[2].fill = true;\n    data2.datasets[2].backgroundColor = gradient;\n    return _objectSpread({}, data2);\n  };\n\n  var options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    onAnimationComplete: function onAnimationComplete() {\n      this.showTooltip(this.datasets[0].points, true);\n    },\n    layout: {\n      padding: {\n        left: 5,\n        right: 15,\n        top: 15,\n        bottom: 15\n      }\n    },\n    animation: {\n      easing: 'easeInOutQuad',\n      duration: 999\n    },\n    scales: {\n      xAxes: [{\n        gridLines: {\n          backgroundColor: props.theme.analogous,\n          display: false,\n          drawBorder: true,\n          drawTicks: true,\n          color: 'rgba(0, 0, 0, 0.05)',\n          lineWidth: 1,\n          zeroLineWidth: 1\n        }\n      }],\n      yAxes: [{\n        ticks: {\n          display: true,\n          maxTicksLimit: 6\n        },\n        gridLines: {\n          backgroundColor: props.theme.primaryVariant,\n          display: false,\n          drawBorder: false,\n          // drawBorder: true,\n          drawTicks: true,\n          color: 'rgba(0, 0, 0, 0.05)',\n          lineWidth: 1,\n          zeroLineWidth: 1\n        }\n      }]\n    },\n    elements: {\n      line: {\n        tension: 0.5\n      }\n    },\n    legend: {\n      display: props.showLegend && true,\n      position: 'bottom'\n    },\n    tooltips: {\n      displayColors: true,\n      mode: 'index',\n      titleAlign: 'center',\n      position: 'nearest',\n      intersect: false,\n      bodySpacing: 4,\n      padding: 15,\n      titleFontFamily: 'Rubik',\n      backgroundColor: props.theme.dark,\n      titleFontColor: '#f9f9f9',\n      xPadding: 24,\n      yPadding: 14\n    },\n    hover: {\n      mode: 'index',\n      intersect: false\n    },\n    plugins: {\n      datalabels: {\n        display: function display(ctx) {\n          var i = ctx.dataIndex;\n          if (ctx.dataset.label !== 'cases') return 0;\n          return i === Math.floor(ctx.dataset.data.length / 3) || i === Math.floor(ctx.dataset.data.length * 0.66) || i === ctx.dataset.data.length - 1; // return i === 0 || i === (ctx.dataset.data.length - 1) || !(i % 4)\n        },\n        align: function align(ctx) {\n          return ctx.dataIndex === ctx.dataset.data.length - 1 ? 'end' : 'end';\n        },\n        anchor: 'end',\n        padding: {\n          left: 0,\n          right: -50,\n          top: -5,\n          bottom: 0\n        },\n        color: props.theme.color,\n        labels: {\n          title: {\n            font: {\n              weight: 'bold',\n              style: 'italic',\n              family: 'Rubik'\n            }\n          }\n        }\n      }\n    }\n  };\n  return __jsx(Div, null, __jsx(Line, {\n    label: props.label,\n    data: data,\n    width: 100,\n    options: options // height={40}\n\n  }));\n};\n\nexport default withTheme(LineChart);","map":null,"metadata":{},"sourceType":"module"}