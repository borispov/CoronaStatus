{"ast":null,"code":"var _jsxFileName = \"/Users/raypo/Desktop/Projectos/CoronaStatus/context/LocaleContext.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useRef, createContext } from 'react'; // import { useRouter } from 'next/dist/client/router'\n\nexport var LocaleContext = createContext();\nexport var LocaleProvider = function LocaleProvider(_ref) {\n  var lang = _ref.lang,\n      children = _ref.children;\n  // Default Setting\n  var initialState = {\n    locale: 'he',\n    languageName: 'Hebrew'\n  };\n\n  var _useState = useState(initialState.locale),\n      locale = _useState[0],\n      setLocale = _useState[1]; // const { query } = useRouter()\n  // store the preference\n\n\n  useEffect(function () {\n    if (locale === 'he') {\n      var langName = JSON.parse(localStorage.getItem('locale'));\n      setLocale(locale);\n    } else if (locale !== localStorage.getItem('locale')) {\n      localStorage.setItem('locale', JSON.stringify(locale));\n    }\n  }, [locale]); // sync locale value on client-side route changes\n  // React.useEffect(() => {\n  //   if (typeof query.lang === 'string' && isLocale(query.lang) && locale !== query.lang) {\n  //     setLocale(query.lang)\n  //   }\n  // }, [query.lang, locale])\n\n  return __jsx(LocaleContext.Provider, {\n    value: [locale, setLocale],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, children);\n};","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/context/LocaleContext.js"],"names":["useState","useEffect","useRef","createContext","LocaleContext","LocaleProvider","lang","children","initialState","locale","languageName","setLocale","langName","JSON","parse","localStorage","getItem","setItem","stringify"],"mappings":";;;AAAA,SACEA,QADF,EAEEC,SAFF,EAGEC,MAHF,EAIEC,aAJF,QAKO,OALP,C,CAMA;;AAGA,OAAO,IAAMC,aAAa,GAAGD,aAAa,EAAnC;AAEP,OAAO,IAAME,cAAc,GAAG,SAAjBA,cAAiB,OAAwB;AAAA,MAArBC,IAAqB,QAArBA,IAAqB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AACpD;AACA,MAAMC,YAAY,GAAG;AAAEC,IAAAA,MAAM,EAAE,IAAV;AAAgBC,IAAAA,YAAY,EAAE;AAA9B,GAArB;;AAFoD,kBAIxBV,QAAQ,CAACQ,YAAY,CAACC,MAAd,CAJgB;AAAA,MAI7CA,MAJ6C;AAAA,MAIrCE,SAJqC,iBAKpD;AAEA;;;AACAV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIQ,MAAM,KAAK,IAAf,EAAqB;AACnB,UAAMG,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAX,CAAjB;AACAL,MAAAA,SAAS,CAACF,MAAD,CAAT;AACD,KAHD,MAGO,IAAIA,MAAM,KAAKM,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAf,EAA+C;AACpDD,MAAAA,YAAY,CAACE,OAAb,CAAqB,QAArB,EAA+BJ,IAAI,CAACK,SAAL,CAAeT,MAAf,CAA/B;AACD;AACF,GAPQ,EAON,CAACA,MAAD,CAPM,CAAT,CARoD,CAiBpD;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAO,MAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE,CAAEA,MAAF,EAAUE,SAAV,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuDJ,QAAvD,CAAP;AACD,CAzBM","sourcesContent":["import {\n  useState,\n  useEffect,\n  useRef,\n  createContext\n} from 'react'\n// import { useRouter } from 'next/dist/client/router'\n\n\nexport const LocaleContext = createContext()\n\nexport const LocaleProvider = ({ lang, children }) => {\n  // Default Setting\n  const initialState = { locale: 'he', languageName: 'Hebrew' }\n\n  const [locale, setLocale] = useState(initialState.locale)\n  // const { query } = useRouter()\n\n  // store the preference\n  useEffect(() => {\n    if (locale === 'he') {\n      const langName = JSON.parse(localStorage.getItem('locale'))\n      setLocale(locale)\n    } else if (locale !== localStorage.getItem('locale')) {\n      localStorage.setItem('locale', JSON.stringify(locale))\n    }\n  }, [locale])\n\n  // sync locale value on client-side route changes\n  // React.useEffect(() => {\n  //   if (typeof query.lang === 'string' && isLocale(query.lang) && locale !== query.lang) {\n  //     setLocale(query.lang)\n  //   }\n  // }, [query.lang, locale])\n\n  return <LocaleContext.Provider value={[ locale, setLocale ]}>{children}</LocaleContext.Provider>\n}\n"]},"metadata":{},"sourceType":"module"}