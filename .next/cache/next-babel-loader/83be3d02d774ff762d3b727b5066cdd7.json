{"ast":null,"code":"// meant for Line Chart Cases/Deaths Chart\nconst firstWhole = (arr, n = 0) => {\n  if (arr[n] > 0) return n;\n  if (arr[n] == undefined) return 0;\n  n++;\n  return firstWhole(arr, n);\n};\n\nconst sortForChart = obj => {\n  const zeroNull = c => c === null ? 0 : c;\n\n  const sortedObj = obj.sort((a, b) => new Date(a.date) - new Date(b.date));\n  const initCasesArray = sortedObj.map(o => o.total_cases); // console.log(initCasesArray);\n\n  const firstNumIndex = firstWhole(initCasesArray);\n  const fObj = sortedObj.slice(firstNumIndex);\n  const cases = fObj.map(o => o.total_cases);\n  const labels = fObj.map(o => o.date);\n  const deaths = fObj.map(o => zeroNull(o.total_deaths));\n  const newCases = fObj.map(o => zeroNull(o.new_cases));\n  const label = obj[0].location;\n  const shortLabels = labels.map(label => {\n    let d = new Date(label);\n    return d.getDate() + '.' + d.getMonth();\n  });\n  const datasets = [{\n    label: 'new cases',\n    data: newCases,\n    backgroundColor: '#fc3111',\n    borderColor: '#fc3111',\n    strokeColor: '#301934',\n    pointRadius: 2,\n    borderWidth: 2\n  }, {\n    label: 'deaths',\n    data: deaths,\n    backgroundColor: 'rgba(29,82,209,1) 100%)',\n    borderColor: 'rgba(21, 21, 21, 1)',\n    strokeColor: \"rgba(222, 222, 34, 1)\",\n    pointRadius: 3,\n    borderWidth: 3\n  }, {\n    label: 'cases',\n    data: cases,\n    backgroundColor: 'rgba(208,42,144,1)',\n    borderColor: 'rgba(186, 50, 60, 1)',\n    strokeColor: \"rgba(200, 200, 200, 1)\",\n    pointRadius: 2,\n    borderWidth: 3,\n    fill: false\n  }];\n  return {\n    datasets,\n    shortLabels,\n    label\n  };\n};\n\nexport default sortForChart;","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/utils/sortForChart.js"],"names":["firstWhole","arr","n","undefined","sortForChart","obj","zeroNull","c","sortedObj","sort","a","b","Date","date","initCasesArray","map","o","total_cases","firstNumIndex","fObj","slice","cases","labels","deaths","total_deaths","newCases","new_cases","label","location","shortLabels","d","getDate","getMonth","datasets","data","backgroundColor","borderColor","strokeColor","pointRadius","borderWidth","fill"],"mappings":"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","sourcesContent":["// meant for Line Chart Cases/Deaths Chart\n\nconst firstWhole = (arr, n = 0) => {\n  if (arr[n] > 0) return n\n  if (arr[n] == undefined) return 0\n  n++\n  return firstWhole(arr, n)\n}\n\n\nconst sortForChart = obj => {\n\n  const zeroNull = c => c === null ? 0 : c\n  const sortedObj = obj.sort((a,b) => new Date(a.date) - new Date(b.date))\n\n  const initCasesArray = sortedObj.map(o => o.total_cases)\n  // console.log(initCasesArray);\n  const firstNumIndex = firstWhole(initCasesArray)\n  const fObj = sortedObj.slice(firstNumIndex)\n  const cases = fObj.map(o => o.total_cases)\n  const labels = fObj.map(o => o.date)\n  const deaths = fObj.map(o => zeroNull(o.total_deaths))\n  const newCases = fObj.map(o => zeroNull(o.new_cases))\n  const label = obj[0].location\n\n  const shortLabels = labels.map(label => {\n    let d = new Date(label)\n    return d.getDate() + '.' + d.getMonth()\n  })\n\n\n  const datasets = [\n    {\n      label: 'new cases',\n      data: newCases,\n      backgroundColor: '#fc3111',\n      borderColor: '#fc3111',\n      strokeColor: '#301934',\n      pointRadius: 2,\n      borderWidth: 2\n    },\n    {\n      label: 'deaths',\n      data: deaths,\n      backgroundColor: 'rgba(29,82,209,1) 100%)',\n      borderColor: 'rgba(21, 21, 21, 1)',\n      strokeColor: \"rgba(222, 222, 34, 1)\",\n      pointRadius: 3,\n      borderWidth: 3\n    },\n    {\n      label: 'cases',\n      data: cases,\n      backgroundColor: 'rgba(208,42,144,1)',\n      borderColor: 'rgba(186, 50, 60, 1)',\n      strokeColor: \"rgba(200, 200, 200, 1)\",\n      pointRadius: 2,\n      borderWidth: 3,\n      fill: false\n    }\n  ]\n\n  return {\n    datasets,\n    shortLabels,\n    label\n  }\n}\n\nexport default sortForChart\n"]},"metadata":{},"sourceType":"module"}