{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nvar isUSA = function isUSA(s) {\n  return s === 'usa' || s === 'Usa' || s === 'United States';\n};\n\nvar isUK = function isUK(str) {\n  return str === 'Uk' || str === 'England' || str === 'United Kingdom' || str == 'great britain';\n};\n\nvar capitalize = function capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.toLowerCase().slice(1);\n};\n\nvar parseCountry = function parseCountry(country) {\n  return isUSA(country) ? 'USA' : isUK(country) ? 'UK' : country;\n};\n\nexport default function useYday(url, country) {\n  var _useState = useState(),\n      yesterdayCn = _useState[0],\n      setStats = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      error = _useState3[0],\n      setError = _useState3[1];\n\n  useEffect(function () {\n    function fetchData() {\n      var URL, _ref, data, _yesterdayCn;\n\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              setError();\n              URL = url + parseCountry(country).toLowerCase();\n              _context.prev = 3;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(axios.get(URL + '?yesterday=true'));\n\n            case 6:\n              _ref = _context.sent;\n              data = _ref.data;\n              _yesterdayCn = {\n                active: data.active,\n                cases: data.cases,\n                todayCases: data.todayCases,\n                recovered: data.recovered,\n                deaths: data.deaths,\n                country: data.country\n              };\n              console.log(_yesterdayCn);\n              setStats(_yesterdayCn);\n              setLoading(false);\n              _context.next = 17;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](3);\n              setError(_context.t0);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[3, 14]], Promise);\n    }\n\n    fetchData();\n  }, [country]);\n  return {\n    yesterdayCn: yesterdayCn,\n    loading: loading,\n    error: error\n  };\n}","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/utils/useYday.js"],"names":["useState","useEffect","axios","isUSA","s","isUK","str","capitalize","charAt","toUpperCase","toLowerCase","slice","parseCountry","country","useYday","url","yesterdayCn","setStats","loading","setLoading","error","setError","fetchData","URL","get","data","active","cases","todayCases","recovered","deaths","console","log"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,CAAC;AAAA,SAAIA,CAAC,KAAK,KAAN,IAAeA,CAAC,KAAK,KAArB,IAA8BA,CAAC,KAAK,eAAxC;AAAA,CAAf;;AACA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAC,GAAG;AAAA,SAAIA,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAK,SAAxB,IAAqCA,GAAG,KAAK,gBAA7C,IAAiEA,GAAG,IAAI,eAA5E;AAAA,CAAhB;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAD,GAAG;AAAA,SAAIA,GAAG,CAACE,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BH,GAAG,CAACI,WAAJ,GAAkBC,KAAlB,CAAwB,CAAxB,CAAlC;AAAA,CAAtB;;AACA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,OAAO;AAAA,SAAIV,KAAK,CAACU,OAAD,CAAL,GAAiB,KAAjB,GAAyBR,IAAI,CAACQ,OAAD,CAAJ,GAAgB,IAAhB,GAAuBA,OAApD;AAAA,CAA5B;;AAEA,eAAe,SAASC,OAAT,CAAiBC,GAAjB,EAAsBF,OAAtB,EAA+B;AAAA,kBAEZb,QAAQ,EAFI;AAAA,MAErCgB,WAFqC;AAAA,MAExBC,QAFwB;;AAAA,mBAGdjB,QAAQ,CAAC,KAAD,CAHM;AAAA,MAGrCkB,OAHqC;AAAA,MAG5BC,UAH4B;;AAAA,mBAIlBnB,QAAQ,CAAC,KAAD,CAJU;AAAA,MAIrCoB,KAJqC;AAAA,MAI9BC,QAJ8B;;AAM5CpB,EAAAA,SAAS,CAAC,YAAM;AAEd,aAAeqB,SAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AACEH,cAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,cAAAA,QAAQ;AAEFE,cAAAA,GAJR,GAIcR,GAAG,GAAGH,YAAY,CAACC,OAAD,CAAZ,CAAsBH,WAAtB,EAJpB;AAAA;AAAA;AAAA,+CAO2BR,KAAK,CAACsB,GAAN,CAAUD,GAAG,GAAG,iBAAhB,CAP3B;;AAAA;AAAA;AAOYE,cAAAA,IAPZ,QAOYA,IAPZ;AAQUT,cAAAA,YARV,GAQwB;AAClBU,gBAAAA,MAAM,EAAED,IAAI,CAACC,MADK;AAElBC,gBAAAA,KAAK,EAAEF,IAAI,CAACE,KAFM;AAGlBC,gBAAAA,UAAU,EAAEH,IAAI,CAACG,UAHC;AAIlBC,gBAAAA,SAAS,EAAEJ,IAAI,CAACI,SAJE;AAKlBC,gBAAAA,MAAM,EAAEL,IAAI,CAACK,MALK;AAMlBjB,gBAAAA,OAAO,EAAEY,IAAI,CAACZ;AANI,eARxB;AAiBIkB,cAAAA,OAAO,CAACC,GAAR,CAAYhB,YAAZ;AAEAC,cAAAA,QAAQ,CAACD,YAAD,CAAR;AACAG,cAAAA,UAAU,CAAC,KAAD,CAAV;AApBJ;AAAA;;AAAA;AAAA;AAAA;AAsBIE,cAAAA,QAAQ,aAAR;;AAtBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyBAC,IAAAA,SAAS;AACV,GA5BQ,EA4BN,CAACT,OAAD,CA5BM,CAAT;AA6BA,SAAO;AACLG,IAAAA,WAAW,EAAXA,WADK;AACQE,IAAAA,OAAO,EAAPA,OADR;AACiBE,IAAAA,KAAK,EAALA;AADjB,GAAP;AAGD","sourcesContent":["import { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nconst isUSA = s => s === 'usa' || s === 'Usa' || s === 'United States'\nconst isUK = str => str === 'Uk' || str === 'England' || str === 'United Kingdom' || str == 'great britain'\nconst capitalize = str => str.charAt(0).toUpperCase() + str.toLowerCase().slice(1)\nconst parseCountry = country => isUSA(country) ? 'USA' : isUK(country) ? 'UK' : country\n\nexport default function useYday(url, country) {\n\n  const [yesterdayCn, setStats] = useState();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n\n    async function fetchData() {\n      setLoading(true)\n      setError()\n\n      const URL = url + parseCountry(country).toLowerCase()\n\n      try {\n        const { data } = await axios.get(URL + '?yesterday=true')\n        const yesterdayCn = {\n          active: data.active,\n          cases: data.cases,\n          todayCases: data.todayCases,\n          recovered: data.recovered,\n          deaths: data.deaths,\n          country: data.country\n        }\n\n        console.log(yesterdayCn);\n\n        setStats(yesterdayCn)\n        setLoading(false)\n       } catch(e) {\n        setError(e)\n      }\n    }\n    fetchData();\n  }, [country])\n  return {\n    yesterdayCn, loading, error\n  }\n}\n"]},"metadata":{},"sourceType":"module"}