{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/raypo/Desktop/Projectos/CoronaStatus/utils/useStats.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport useGeolocation from 'react-hook-geolocation';\n\nvar ComponentWithGeolocation = function ComponentWithGeolocation() {\n  var geolocation = useGeolocation();\n  return !geolocation.error ? __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, __jsx(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"Latitude:          \", geolocation.latitude), __jsx(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, \"Longitude:         \", geolocation.longitude), __jsx(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, \"Location accuracy: \", geolocation.accuracy), __jsx(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, \"Altitude:          \", geolocation.altitude), __jsx(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \"Altitude accuracy: \", geolocation.altitudeAccuracy), __jsx(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, \"Heading:           \", geolocation.heading), __jsx(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"Speed:             \", geolocation.speed), __jsx(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"Timestamp:         \", geolocation.timestamp)) : __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"No geolocation, sorry.\");\n};\n\nfunction getCountry(list) {\n  return function (queryCountry) {\n    return list.reduce(function (a, c) {\n      return c.country === queryCountry ? c : a;\n    }, {});\n  };\n}\n\nfunction useStats(url) {\n  var _useState = useState(),\n      stats = _useState[0],\n      setStats = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      error = _useState3[0],\n      setError = _useState3[1];\n\n  useEffect(function () {\n    function fetchData() {\n      var data;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              console.log('fetching data...');\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(fetch(url).then(function (res) {\n                return res.json();\n              }).then(function (d) {\n                return getCountry(d)(\"Israel\");\n              })[\"catch\"](function (err) {\n                return setError(err);\n              }));\n\n            case 4:\n              data = _context.sent;\n              setStats(data);\n              setLoading(false);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    fetchData();\n  }, []);\n  return {\n    stats: stats,\n    loading: loading,\n    error: error\n  };\n}\n\nexport default useStats;","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/utils/useStats.js"],"names":["useState","useEffect","useGeolocation","ComponentWithGeolocation","geolocation","error","latitude","longitude","accuracy","altitude","altitudeAccuracy","heading","speed","timestamp","getCountry","list","queryCountry","reduce","a","c","country","useStats","url","stats","setStats","loading","setLoading","setError","fetchData","console","log","fetch","then","res","json","d","err","data"],"mappings":";;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,cAAP,MAA2B,wBAA3B;;AAEA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,GAAM;AACrC,MAAMC,WAAW,GAAGF,cAAc,EAAlC;AAEA,SAAO,CAACE,WAAW,CAACC,KAAb,GAEH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAwBD,WAAW,CAACE,QAApC,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAwBF,WAAW,CAACG,SAApC,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAwBH,WAAW,CAACI,QAApC,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAwBJ,WAAW,CAACK,QAApC,CAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAwBL,WAAW,CAACM,gBAApC,CALF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAwBN,WAAW,CAACO,OAApC,CANF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAwBP,WAAW,CAACQ,KAApC,CAPF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAwBR,WAAW,CAACS,SAApC,CARF,CAFG,GAcH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAdJ;AAgBD,CAnBD;;AAuBA,SAASC,UAAT,CAAoBC,IAApB,EAAyB;AACvB,SAAO,UAASC,YAAT,EAAuB;AAC5B,WAAOD,IAAI,CAACE,MAAL,CAAY,UAACC,CAAD,EAAGC,CAAH;AAAA,aAASA,CAAC,CAACC,OAAF,KAAcJ,YAAd,GAA6BG,CAA7B,GAAiCD,CAA1C;AAAA,KAAZ,EAAyD,EAAzD,CAAP;AACD,GAFD;AAGD;;AAED,SAASG,QAAT,CAAkBC,GAAlB,EAAuB;AAAA,kBACKtB,QAAQ,EADb;AAAA,MACduB,KADc;AAAA,MACPC,QADO;;AAAA,mBAESxB,QAAQ,CAAC,KAAD,CAFjB;AAAA,MAEdyB,OAFc;AAAA,MAELC,UAFK;;AAAA,mBAGK1B,QAAQ,CAAC,KAAD,CAHb;AAAA,MAGdK,KAHc;AAAA,MAGPsB,QAHO;;AAKrB1B,EAAAA,SAAS,CAAC,YAAM;AACd,aAAe2B,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACEF,cAAAA,UAAU,CAAC,IAAD,CAAV;AACAG,cAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AAFF;AAAA,+CAGqBC,KAAK,CAACT,GAAD,CAAL,CACdU,IADc,CACT,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,eADM,EAEdF,IAFc,CAET,UAAAG,CAAC;AAAA,uBAAIrB,UAAU,CAACqB,CAAD,CAAV,CAAc,QAAd,CAAJ;AAAA,eAFQ,WAGR,UAAAC,GAAG;AAAA,uBAAIT,QAAQ,CAACS,GAAD,CAAZ;AAAA,eAHK,CAHrB;;AAAA;AAGQC,cAAAA,IAHR;AAOEb,cAAAA,QAAQ,CAACa,IAAD,CAAR;AACAX,cAAAA,UAAU,CAAC,KAAD,CAAV;;AARF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUAE,IAAAA,SAAS;AACV,GAZQ,EAYN,EAZM,CAAT;AAaA,SAAO;AACLL,IAAAA,KAAK,EAALA,KADK;AACEE,IAAAA,OAAO,EAAPA,OADF;AACWpB,IAAAA,KAAK,EAALA;AADX,GAAP;AAGD;;AAED,eAAegB,QAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport useGeolocation from 'react-hook-geolocation'\n \nconst ComponentWithGeolocation = () => {\n  const geolocation = useGeolocation()\n \n  return !geolocation.error\n    ? (\n      <ul>\n        <li>Latitude:          {geolocation.latitude}</li>\n        <li>Longitude:         {geolocation.longitude}</li>\n        <li>Location accuracy: {geolocation.accuracy}</li>\n        <li>Altitude:          {geolocation.altitude}</li>\n        <li>Altitude accuracy: {geolocation.altitudeAccuracy}</li>\n        <li>Heading:           {geolocation.heading}</li>\n        <li>Speed:             {geolocation.speed}</li>\n        <li>Timestamp:         {geolocation.timestamp}</li>\n      </ul>\n    )\n    : (\n      <p>No geolocation, sorry.</p>\n    )\n}\n\n\n\nfunction getCountry(list){\n  return function(queryCountry) {\n    return list.reduce((a,c) => c.country === queryCountry ? c : a, {})\n  }\n}\n\nfunction useStats(url) {\n  const [stats, setStats] = useState();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    async function fetchData() {\n      setLoading(true)\n      console.log('fetching data...')\n      const data = await fetch(url)\n          .then(res => res.json())\n          .then(d => getCountry(d)(\"Israel\"))\n          .catch(err => setError(err))\n      setStats(data)\n      setLoading(false)\n    }\n    fetchData();\n  }, [])\n  return {\n    stats, loading, error\n  }\n}\n\nexport default useStats;\n"]},"metadata":{},"sourceType":"module"}