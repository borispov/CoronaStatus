{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport sortForChart from './sortForChart';\nvar baseURL = \"http://46.101.156.51:3003/api/v1/alltime/\";\n\nfunction currentCountry() {\n  return _regeneratorRuntime.async(function currentCountry$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(axios.get('https://extreme-ip-lookup.com/json/').then(function (res) {\n            return res.data.country;\n          })[\"catch\"](function (e) {\n            return 'israel';\n          }));\n\n        case 2:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction useTime() {\n  var country = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'world';\n  var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : baseURL;\n\n  var _useState = useState(),\n      timeStats = _useState[0],\n      setData = _useState[1];\n\n  var _useState2 = useState(false),\n      timeLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      timeError = _useState3[0],\n      setError = _useState3[1];\n\n  useEffect(function () {\n    console.log('use time triggered');\n\n    function fetchData() {\n      var URL, data, timeStats;\n      return _regeneratorRuntime.async(function fetchData$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setLoading(true);\n              setError();\n              URL = country === 'init' ? baseURL + currentCountry() : country !== 'world' ? baseURL + country : baseURL; // const URL = country === 'world' ? baseURL : baseURL+country\n\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(axios.get(URL).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return setError(err);\n              }));\n\n            case 5:\n              data = _context2.sent;\n              timeStats = sortForChart(data);\n              setData(timeStats);\n              setLoading(false);\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    fetchData();\n  }, [country]);\n\n  if (country !== 'world') {\n    var counntryStats = timeStats;\n    var counntryLoading = timeLoading;\n    var counntryError = timeError;\n    return {\n      counntryStats: counntryStats,\n      counntryLoading: counntryLoading,\n      counntryError: counntryError\n    };\n  }\n\n  return {\n    timeStats: timeStats,\n    timeLoading: timeLoading,\n    timeError: timeError\n  };\n}\n\nexport default useTime;","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/utils/useTime.js"],"names":["useState","useEffect","axios","sortForChart","baseURL","currentCountry","get","then","res","data","country","e","useTime","url","timeStats","setData","timeLoading","setLoading","timeError","setError","console","log","fetchData","URL","err","counntryStats","counntryLoading","counntryError"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,IAAMC,OAAO,8CAAb;;AAEA,SAAeC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACeH,KAAK,CACfI,GADU,CACN,qCADM,EAEVC,IAFU,CAEL,UAAAC,GAAG;AAAA,mBAAIA,GAAG,CAACC,IAAJ,CAASC,OAAb;AAAA,WAFE,WAGJ,UAAAC,CAAC;AAAA,mBAAI,QAAJ;AAAA,WAHG,CADf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,SAASC,OAAT,GAAmD;AAAA,MAAlCF,OAAkC,uEAAxB,OAAwB;AAAA,MAAfG,GAAe,uEAATT,OAAS;;AAAA,kBACpBJ,QAAQ,EADY;AAAA,MAC1Cc,SAD0C;AAAA,MAC/BC,OAD+B;;AAAA,mBAEff,QAAQ,CAAC,KAAD,CAFO;AAAA,MAE1CgB,WAF0C;AAAA,MAE7BC,UAF6B;;AAAA,mBAGnBjB,QAAQ,CAAC,KAAD,CAHW;AAAA,MAG1CkB,SAH0C;AAAA,MAG/BC,QAH+B;;AAKjDlB,EAAAA,SAAS,CAAC,YAAM;AACdmB,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;;AACA,aAAeC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACEL,cAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,cAAAA,QAAQ;AAEFI,cAAAA,GAJR,GAIcb,OAAO,KAAK,MAAZ,GACRN,OAAO,GAACC,cAAc,EADd,GAERK,OAAO,KAAK,OAAZ,GACEN,OAAO,GAACM,OADV,GAEEN,OARR,EASE;;AATF;AAAA,+CAWqBF,KAAK,CAACI,GAAN,CAAUiB,GAAV,EAChBhB,IADgB,CACX,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACC,IAAR;AAAA,eADQ,WAEV,UAAAe,GAAG;AAAA,uBAAIL,QAAQ,CAACK,GAAD,CAAZ;AAAA,eAFO,CAXrB;;AAAA;AAWQf,cAAAA,IAXR;AAcQK,cAAAA,SAdR,GAcoBX,YAAY,CAACM,IAAD,CAdhC;AAeEM,cAAAA,OAAO,CAACD,SAAD,CAAP;AACAG,cAAAA,UAAU,CAAC,KAAD,CAAV;;AAhBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBAK,IAAAA,SAAS;AACV,GAtBQ,EAsBN,CAACZ,OAAD,CAtBM,CAAT;;AAwBA,MAAKA,OAAO,KAAK,OAAjB,EAA2B;AACzB,QAAMe,aAAa,GAAGX,SAAtB;AACA,QAAMY,eAAe,GAAGV,WAAxB;AACA,QAAMW,aAAa,GAAGT,SAAtB;AACA,WAAO;AAAEO,MAAAA,aAAa,EAAbA,aAAF;AAAiBC,MAAAA,eAAe,EAAfA,eAAjB;AAAkCC,MAAAA,aAAa,EAAbA;AAAlC,KAAP;AACD;;AAED,SAAO;AACLb,IAAAA,SAAS,EAATA,SADK;AACME,IAAAA,WAAW,EAAXA,WADN;AACmBE,IAAAA,SAAS,EAATA;AADnB,GAAP;AAGD;;AAED,eAAeN,OAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport sortForChart from './sortForChart'\n\nconst baseURL = `http://46.101.156.51:3003/api/v1/alltime/`\n\nasync function currentCountry(){\n  return await axios\n    .get('https://extreme-ip-lookup.com/json/')\n    .then(res => res.data.country)\n    .catch(e => 'israel')\n}\n\nfunction useTime(country = 'world', url = baseURL) {\n  const [timeStats, setData] = useState();\n  const [timeLoading, setLoading] = useState(false);\n  const [timeError, setError] = useState(false);\n\n  useEffect(() => {\n    console.log('use time triggered');\n    async function fetchData() {\n      setLoading(true)\n      setError()\n\n      const URL = country === 'init' \n        ? baseURL+currentCountry() \n        : country !== 'world' \n          ? baseURL+country \n          : baseURL\n      // const URL = country === 'world' ? baseURL : baseURL+country\n\n      const data = await axios.get(URL)\n        .then(res => res.data)\n        .catch(err => setError(err))\n      const timeStats = sortForChart(data);\n      setData(timeStats)\n      setLoading(false)\n    }\n\n    fetchData();\n  }, [country])\n\n  if ( country !== 'world' ) {\n    const counntryStats = timeStats\n    const counntryLoading = timeLoading\n    const counntryError = timeError\n    return { counntryStats, counntryLoading, counntryError }\n  }\n\n  return {\n    timeStats, timeLoading, timeError\n  }\n}\n\nexport default useTime;\n"]},"metadata":{},"sourceType":"module"}