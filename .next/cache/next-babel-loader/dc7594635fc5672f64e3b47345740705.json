{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/raypo/Desktop/Projectos/CoronaStatus/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport axios from 'axios';\nimport Head from 'next/head';\nimport { useEffect, useContext } from 'react';\nimport CoronaApp from '../components/CoronaApp';\nimport InfoSection from '../components/InfoSection';\nimport Footer from '../components/Footer';\nimport { FadeIn } from '../components/S';\nimport useWorldData from '../hooks/useWorldData';\nimport { ProxyContext } from '../context/proxy-context';\nimport { LocaleContext } from '../context/LocaleContext';\nimport { getInitialLocale } from '../locales/getInitialLocale';\n\nvar getCountryFromData = function getCountryFromData(response) {\n  return response.data.country;\n};\n\nvar currentCountry = function currentCountry(url) {\n  return _regeneratorRuntime.async(function currentCountry$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(axios.get(url).then(getCountryFromData)[\"catch\"](function (e) {\n            return 'israel';\n          }));\n\n        case 2:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nfunction IndexPage(worldTime, yesterdayGlobal, newProxy) {\n  var _useContext = useContext(ProxyContext),\n      proxy = _useContext[0];\n\n  console.log(worldTime);\n  console.log(yesterdayGlobal);\n  useEffect(function () {\n    var ignore = false;\n\n    if (newProxy && !ignore) {\n      setProxy(newProxy);\n    }\n\n    return function () {\n      ignore: true;\n    };\n  }, [newProxy]);\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, __jsx(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"nCorona - Novel Coronavirus Statistics & Resources for Coping\")), __jsx(FadeIn, {\n    delay: \"0.5s\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, __jsx(CoronaApp, {\n    userLocation: proxy.countryName,\n    worldTime: worldTime,\n    yesterdayGlobal: yesterdayGlobal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), __jsx(InfoSection, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  })));\n}\n\nIndexPage.getInitialProps = function _callee(_ref) {\n  var req, worldTime, globalData, yesterdayGlobal, ipAddress, localAddresses, proxyUrl, countryName, newProxy;\n  return _regeneratorRuntime.async(function _callee$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          req = _ref.req;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(useWorldData());\n\n        case 3:\n          worldTime = _context2.sent;\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(axios.get('https://corona.lmao.ninja/v2/all?yesterday=true'));\n\n        case 6:\n          globalData = _context2.sent;\n          yesterdayGlobal = {\n            active: globalData.data.active,\n            critical: globalData.data.critical,\n            cases: globalData.data.cases,\n            todayCases: globalData.data.todayCases,\n            recovered: globalData.data.recovered,\n            deaths: globalData.data.deaths,\n            country: globalData.data.country,\n            affectedCountries: globalData.data.affectedCountries\n          };\n\n          if (!req) {\n            _context2.next = 23;\n            break;\n          }\n\n          ipAddress = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\n          localAddresses = ['::1', '127.0.0.1', 'localhost']; // Construct URL with IP ADDRESS\n\n          proxyUrl = !localAddresses.includes(ipAddress) && \"https://extreme-ip-lookup.com/json/\".concat(ipAddress) || null;\n          _context2.prev = 12;\n          _context2.next = 15;\n          return _regeneratorRuntime.awrap(currentCountry(proxyUrl));\n\n        case 15:\n          countryName = _context2.sent;\n          newProxy = {\n            countryName: countryName,\n            ipAddress: ipAddress\n          };\n          return _context2.abrupt(\"return\", {\n            newProxy: newProxy,\n            worldTime: worldTime,\n            yesterdayGlobal: yesterdayGlobal\n          });\n\n        case 20:\n          _context2.prev = 20;\n          _context2.t0 = _context2[\"catch\"](12);\n          return _context2.abrupt(\"return\", {\n            errorCode: _context2.t0.code,\n            errorMessage: _context2.t0.message,\n            yesterdayGlobal: yesterdayGlobal,\n            worldTime: worldTime\n          });\n\n        case 23:\n          return _context2.abrupt(\"return\", {\n            yesterdayGlobal: yesterdayGlobal,\n            worldTime: worldTime,\n            newProxy: null\n          });\n\n        case 24:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[12, 20]], Promise);\n};\n\nexport default IndexPage;","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/pages/index.js"],"names":["axios","Head","useEffect","useContext","CoronaApp","InfoSection","Footer","FadeIn","useWorldData","ProxyContext","LocaleContext","getInitialLocale","getCountryFromData","response","data","country","currentCountry","url","get","then","e","IndexPage","worldTime","yesterdayGlobal","newProxy","proxy","console","log","ignore","setProxy","countryName","getInitialProps","req","globalData","active","critical","cases","todayCases","recovered","deaths","affectedCountries","ipAddress","headers","connection","remoteAddress","localAddresses","proxyUrl","includes","errorCode","code","errorMessage","message"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport Head from 'next/head'\nimport { useEffect, useContext } from 'react'\n\nimport CoronaApp from '../components/CoronaApp'\nimport InfoSection from '../components/InfoSection'\nimport Footer from '../components/Footer'\nimport { FadeIn } from '../components/S'\nimport useWorldData from '../hooks/useWorldData'\n\nimport { ProxyContext } from '../context/proxy-context'\nimport { LocaleContext } from '../context/LocaleContext'\nimport { getInitialLocale } from '../locales/getInitialLocale'\n\nconst getCountryFromData = response => response.data.country\nconst currentCountry = async (url) => await axios.get(url).then(getCountryFromData).catch(e => 'israel')\n\nfunction IndexPage( worldTime, yesterdayGlobal, newProxy) {\n\n  const [proxy]  = useContext(ProxyContext)\n\n  console.log(worldTime);\n  console.log(yesterdayGlobal);\n\n  useEffect(() => {\n    let ignore = false\n    if (newProxy && !ignore) {\n      setProxy(newProxy)\n    }\n    return () => { ignore: true }\n  }, [newProxy])\n\n  return (\n    <>\n      <Head>\n        <title>nCorona - Novel Coronavirus Statistics & Resources for Coping</title>\n      </Head>\n      <FadeIn delay=\"0.5s\">\n       <CoronaApp userLocation={proxy.countryName} worldTime={worldTime} yesterdayGlobal={yesterdayGlobal} />\n        <InfoSection />\n      </FadeIn>\n    </>\n  )\n}\n\nIndexPage.getInitialProps = async ({ req }) => {\n\n  const worldTime = await useWorldData()\n  const globalData = await axios.get('https://corona.lmao.ninja/v2/all?yesterday=true')\n  const yesterdayGlobal = {\n    active: globalData.data.active,\n    critical: globalData.data.critical,\n    cases: globalData.data.cases,\n    todayCases: globalData.data.todayCases,\n    recovered: globalData.data.recovered,\n    deaths: globalData.data.deaths,\n    country: globalData.data.country,\n    affectedCountries: globalData.data.affectedCountries\n  }\n\n  if (req) {\n      const ipAddress = req.headers['x-forwarded-for'] || req.connection.remoteAddress\n      const localAddresses = ['::1', '127.0.0.1', 'localhost']\n      // Construct URL with IP ADDRESS\n      const proxyUrl = !localAddresses.includes(ipAddress) && `https://extreme-ip-lookup.com/json/${ipAddress}` || null\n\n    try {\n      const countryName = await currentCountry(proxyUrl)\n      const newProxy = { countryName, ipAddress }\n      return { newProxy, worldTime, yesterdayGlobal }\n    } catch(e) {\n      return { errorCode: e.code, errorMessage: e.message, yesterdayGlobal, worldTime }\n    }\n  }\n\n  return {yesterdayGlobal, worldTime, newProxy: null}\n}\n\nexport default IndexPage\n"]},"metadata":{},"sourceType":"module"}