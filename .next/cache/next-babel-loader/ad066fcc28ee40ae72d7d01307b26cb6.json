{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport sortForChart from './sortForChart';\nvar baseURL = \"http://46.101.156.51:3003/api/v1/alltime/\";\n\nfunction currentCountry() {\n  return _regeneratorRuntime.async(function currentCountry$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(axios.get('https://extreme-ip-lookup.com/json/').then(function (res) {\n            return res.data.country;\n          })[\"catch\"](function (e) {\n            return 'israel';\n          }));\n\n        case 2:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction useTime(loc) {\n  var url,\n      _useState,\n      timeStats,\n      setData,\n      _useState2,\n      countryStats,\n      setCountryStats,\n      _useState3,\n      timeLoading,\n      setLoading,\n      _useState4,\n      timeError,\n      setError,\n      _useState5,\n      country,\n      setCountry,\n      fetchData,\n      _args4 = arguments;\n\n  return _regeneratorRuntime.async(function useTime$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          fetchData = function _ref(cn) {\n            var isWorld, URL, data, timeStats;\n            return _regeneratorRuntime.async(function fetchData$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    if (!(typeof cn !== 'string')) {\n                      _context3.next = 2;\n                      break;\n                    }\n\n                    return _context3.abrupt(\"return\");\n\n                  case 2:\n                    setLoading(true);\n                    setError();\n                    isWorld = cn === 'world';\n                    URL = cn === 'world' ? baseURL : baseURL + country;\n                    _context3.next = 8;\n                    return _regeneratorRuntime.awrap(axios.get(URL).then(function (res) {\n                      return res.data;\n                    })[\"catch\"](function (err) {\n                      return setError(err);\n                    }));\n\n                  case 8:\n                    data = _context3.sent;\n                    timeStats = sortForChart(data);\n                    isWorld ? setData(timeStats) : setCountryStats(timeStats);\n                    setLoading(false);\n\n                  case 12:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          };\n\n          url = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : baseURL;\n          _useState = useState(), timeStats = _useState[0], setData = _useState[1];\n          _useState2 = useState(), countryStats = _useState2[0], setCountryStats = _useState2[1];\n          _useState3 = useState(false), timeLoading = _useState3[0], setLoading = _useState3[1];\n          _useState4 = useState(false), timeError = _useState4[0], setError = _useState4[1];\n          _useState5 = useState(loc), country = _useState5[0], setCountry = _useState5[1];\n          useEffect(function () {\n            (function _callee() {\n              var geoLocation;\n              return _regeneratorRuntime.async(function _callee$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      _context2.next = 2;\n                      return _regeneratorRuntime.awrap(currentCountry());\n\n                    case 2:\n                      geoLocation = _context2.sent;\n                      setCountry(geoLocation);\n\n                    case 4:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            })();\n          }, []);\n          useEffect(function () {\n            console.log('inside World effect');\n            fetchData('world');\n          }, []);\n          useEffect(function () {\n            country.length && fetchData(country);\n          }, [country]);\n          return _context4.abrupt(\"return\", {\n            countryStats: countryStats,\n            timeStats: timeStats,\n            timeLoading: timeLoading,\n            timeError: timeError\n          });\n\n        case 11:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport default useTime;","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/utils/useTime.js"],"names":["useState","useEffect","axios","sortForChart","baseURL","currentCountry","get","then","res","data","country","e","useTime","loc","fetchData","cn","setLoading","setError","isWorld","URL","err","timeStats","setData","setCountryStats","url","countryStats","timeLoading","timeError","setCountry","geoLocation","console","log","length"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport sortForChart from './sortForChart'\n\nconst baseURL = `http://46.101.156.51:3003/api/v1/alltime/`\n\nasync function currentCountry(){\n  return await axios\n    .get('https://extreme-ip-lookup.com/json/')\n    .then(res => res.data.country)\n    .catch(e => 'israel')\n}\n\nasync function useTime(loc, url = baseURL) {\n  const [timeStats, setData] = useState();\n  const [countryStats, setCountryStats] = useState();\n  const [timeLoading, setLoading] = useState(false);\n  const [timeError, setError] = useState(false);\n  const [country, setCountry] = useState(loc)\n\n  useEffect(() => {\n    (async () => {\n      let geoLocation = await currentCountry()\n      setCountry(geoLocation)\n    })()\n  }, [])\n\n  async function fetchData(cn) {\n    if (typeof cn !== 'string') {return}\n    setLoading(true)\n    setError()\n\n    const isWorld = cn === 'world'\n    const URL =  cn === 'world' ? baseURL : baseURL + country\n    const data = await axios.get(URL)\n      .then(res => res.data)\n      .catch(err => setError(err))\n    const timeStats = sortForChart(data);\n    isWorld ? setData(timeStats) : setCountryStats(timeStats)\n    setLoading(false)\n  }\n\n  useEffect(() => {\n    console.log('inside World effect');\n    fetchData('world')\n  }, [])\n\n  useEffect(() => {\n    country.length && fetchData(country);\n  }, [country])\n\n\n  return {\n    countryStats, timeStats, timeLoading, timeError\n  }\n}\n\nexport default useTime;\n"]},"metadata":{},"sourceType":"module"}