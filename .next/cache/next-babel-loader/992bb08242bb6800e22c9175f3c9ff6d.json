{"ast":null,"code":"var _jsxFileName = \"/Users/raypo/Desktop/Projectos/CoronaStatus/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport CoronaApp from '../components/CoronaApp';\nimport styled, { ThemeProvider } from 'styled-components';\nimport GlobalStyle from './Global';\nimport { useState } from 'react';\nimport { themes } from '../utils/themes';\n\nconst lightTheme = () => _objectSpread({}, themes['common'], {}, themes['light']);\n\nconst darkTheme = () => _objectSpread({}, themes['common'], {}, themes['dark']);\n\nconst Btn = styled.button`\n  color: ${props => props.theme.bgColor};\n  background-color: ${props => props.theme.color};\n  border-radius: 50%;\n  position: absolute;\n  top: ${props => props.top};\n  right: ${props => props.right};\n  left: ${props => props.left};\n  padding: 6px 2px;\n  outline: none;\n`;\nexport default function IndexPage() {\n  const {\n    0: theme,\n    1: setTheme\n  } = useState(lightTheme());\n\n  const setDarkTheme = () => setTheme(darkTheme());\n\n  const setLightTheme = () => setTheme(lightTheme());\n\n  const {\n    0: lang,\n    1: setLang\n  } = useState('heb');\n\n  const setHeb = () => setLang('heb');\n\n  const setEng = () => setLang('eng');\n\n  const isLight = theme.type === 'light';\n  return __jsx(React.Fragment, null, __jsx(ThemeProvider, {\n    theme: theme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, __jsx(GlobalStyle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }), __jsx(CoronaApp, {\n    theme: theme,\n    lang: lang,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    style: {\n      position: 'absolute',\n      top: '5%',\n      right: '3%',\n      padding: '0 8px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, __jsx(Btn, {\n    style: {\n      position: 'relative'\n    },\n    onClick: lang === 'heb' && setEng,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"En\"), __jsx(Btn, {\n    onClick: lang === 'eng' && setHeb,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"\\u05E2\\u05D1\\u05E8\")), __jsx(Btn, {\n    top: \"5%\",\n    left: \"2%\",\n    onClick: !isLight ? setLightTheme : setDarkTheme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \" \", !isLight ? 'Light' : 'Dark')));\n}","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/pages/index.js"],"names":["CoronaApp","styled","ThemeProvider","GlobalStyle","useState","themes","lightTheme","darkTheme","Btn","button","props","theme","bgColor","color","top","right","left","IndexPage","setTheme","setDarkTheme","setLightTheme","lang","setLang","setHeb","setEng","isLight","type","position","padding"],"mappings":";;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,yBAAtB;AACA,OAAOC,MAAP,IAAiBC,aAAjB,QAAsC,mBAAtC;AACA,OAAOC,WAAP,MAAwB,UAAxB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,MAAT,QAAuB,iBAAvB;;AAEA,MAAMC,UAAU,GAAG,wBACdD,MAAM,CAAC,QAAD,CADQ,MAEdA,MAAM,CAAC,OAAD,CAFQ,CAAnB;;AAKA,MAAME,SAAS,GAAG,wBACbF,MAAM,CAAC,QAAD,CADO,MAEbA,MAAM,CAAC,MAAD,CAFO,CAAlB;;AAKA,MAAMG,GAAG,GAAGP,MAAM,CAACQ,MAAO;WACfC,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYC,OAAQ;sBAClBF,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYE,KAAM;;;SAGxCH,KAAK,IAAIA,KAAK,CAACI,GAAI;WACjBJ,KAAK,IAAIA,KAAK,CAACK,KAAM;UACtBL,KAAK,IAAIA,KAAK,CAACM,IAAK;;;CAP9B;AAYA,eAAe,SAASC,SAAT,GAAqB;AAClC,QAAM;AAAA,OAACN,KAAD;AAAA,OAAQO;AAAR,MAAoBd,QAAQ,CAACE,UAAU,EAAX,CAAlC;;AACA,QAAMa,YAAY,GAAG,MAAMD,QAAQ,CAACX,SAAS,EAAV,CAAnC;;AACA,QAAMa,aAAa,GAAG,MAAMF,QAAQ,CAACZ,UAAU,EAAX,CAApC;;AAEA,QAAM;AAAA,OAACe,IAAD;AAAA,OAAOC;AAAP,MAAkBlB,QAAQ,CAAC,KAAD,CAAhC;;AACA,QAAMmB,MAAM,GAAG,MAAMD,OAAO,CAAC,KAAD,CAA5B;;AACA,QAAME,MAAM,GAAG,MAAMF,OAAO,CAAC,KAAD,CAA5B;;AAEA,QAAMG,OAAO,GAAGd,KAAK,CAACe,IAAN,KAAe,OAA/B;AAEA,SACE,4BACE,MAAC,aAAD;AAAe,IAAA,KAAK,EAAEf,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,SAAD;AAAW,IAAA,KAAK,EAAEA,KAAlB;AAAyB,IAAA,IAAI,EAAEU,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAIE;AAAK,IAAA,KAAK,EAAE;AAAEM,MAAAA,QAAQ,EAAE,UAAZ;AAAwBb,MAAAA,GAAG,EAAE,IAA7B;AAAmCC,MAAAA,KAAK,EAAE,IAA1C;AAAgDa,MAAAA,OAAO,EAAE;AAAzD,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AACE,IAAA,KAAK,EAAE;AAACD,MAAAA,QAAQ,EAAE;AAAX,KADT;AAEE,IAAA,OAAO,EAAEN,IAAI,KAAK,KAAT,IAAkBG,MAF7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EAKE,MAAC,GAAD;AACE,IAAA,OAAO,EAAEH,IAAI,KAAK,KAAT,IAAkBE,MAD7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BALF,CAJF,EAaE,MAAC,GAAD;AACE,IAAA,GAAG,EAAC,IADN;AAEE,IAAA,IAAI,EAAC,IAFP;AAGE,IAAA,OAAO,EAAE,CAACE,OAAD,GAAWL,aAAX,GAA2BD,YAHtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAIG,CAACM,OAAD,GAAW,OAAX,GAAqB,MAJxB,CAbF,CADF,CADF;AAwBD","sourcesContent":["import CoronaApp from '../components/CoronaApp'\nimport styled, { ThemeProvider } from 'styled-components'\nimport GlobalStyle from './Global'\nimport { useState } from 'react'\nimport { themes } from '../utils/themes'\n\nconst lightTheme = () => ({\n  ...themes['common'],\n  ...themes['light'],\n})\n\nconst darkTheme = () => ({\n  ...themes['common'],\n  ...themes['dark'],\n})\n\nconst Btn = styled.button`\n  color: ${props => props.theme.bgColor};\n  background-color: ${props => props.theme.color};\n  border-radius: 50%;\n  position: absolute;\n  top: ${props => props.top};\n  right: ${props => props.right};\n  left: ${props => props.left};\n  padding: 6px 2px;\n  outline: none;\n`\n\nexport default function IndexPage() {\n  const [theme, setTheme] = useState(lightTheme())\n  const setDarkTheme = () => setTheme(darkTheme())\n  const setLightTheme = () => setTheme(lightTheme())\n\n  const [lang, setLang] = useState('heb');\n  const setHeb = () => setLang('heb')\n  const setEng = () => setLang('eng')\n\n  const isLight = theme.type === 'light'\n\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <CoronaApp theme={theme} lang={lang} />\n\n        <div style={{ position: 'absolute', top: '5%', right: '3%', padding: '0 8px' }}>\n          <Btn\n            style={{position: 'relative'}}\n            onClick={lang === 'heb' && setEng}\n          >En</Btn>\n          <Btn\n            onClick={lang === 'eng' && setHeb}\n          >עבר</Btn>\n          </div>\n        <Btn \n          top='5%'\n          left='2%'\n          onClick={!isLight ? setLightTheme : setDarkTheme}\n        > {!isLight ? 'Light' : 'Dark'}\n        </Btn>\n      </ThemeProvider>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}