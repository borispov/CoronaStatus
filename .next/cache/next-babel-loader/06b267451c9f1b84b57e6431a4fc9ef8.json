{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { themes } from './themes';\n\nconst theme = _objectSpread({}, themes['common'], {}, themes['light']);\n\nconst firstWhole = (arr, n = 0) => {\n  if (arr[n] > 0) return n;\n  if (arr[n] == undefined) return 0;\n  n++;\n  return firstWhole(arr, n);\n};\n\nconst parseLabel = label => {\n  let d = new Date(label);\n  return d.getDate() + '.' + ('0' + (d.getMonth() + 1)).toString();\n};\n\nconst sortForChart = obj => {\n  const zeroNull = c => c === null ? 0 : c;\n\n  const sortedObj = obj.sort((a, b) => new Date(a.date) - new Date(b.date));\n  const initCasesArray = sortedObj.map(o => o.total_cases);\n  const firstNumIndex = firstWhole(initCasesArray);\n  const fObj = sortedObj.slice(firstNumIndex);\n  const cases = fObj.map(o => o.total_cases);\n  const labels = fObj.map(o => parseLabel(o.date));\n  const deaths = fObj.map(o => zeroNull(o.total_deaths));\n  const newCases = fObj.map(o => zeroNull(o.new_cases));\n  const label = obj[0].location;\n  const datasets = [{\n    label: 'new cases',\n    data: newCases,\n    backgroundColor: '#fc3111',\n    borderColor: theme && theme.successDefault,\n    strokeColor: theme && theme.successDefault,\n    pointRadius: 2,\n    borderWidth: 4,\n    fill: true\n  }, {\n    label: 'deaths',\n    data: deaths,\n    backgroundColor: 'rgba(29,82,209,1) 100%)',\n    backgroundColor: '#333',\n    borderColor: theme && theme.blue,\n    strokeColor: theme && theme.blue,\n    pointRadius: 2,\n    borderWidth: 4\n  }, {\n    label: 'cases',\n    data: cases,\n    backgroundColor: '#2A4561',\n    borderColor: theme && theme.primaryLight || '#6200ee',\n    strokeColor: theme && theme.primaryLight || '#ADFF2F',\n    borderWidth: 5,\n    borderCapStyle: 'butt',\n    borderJoinStyle: 'miter',\n    pointHoverRadius: 5,\n    pointHoverBorderWidth: 2,\n    pointRadius: 2,\n    pointHitRadius: 10\n  }];\n  return {\n    datasets,\n    labels,\n    label\n  };\n};\n\nexport default sortForChart;","map":null,"metadata":{},"sourceType":"module"}