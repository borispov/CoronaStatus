{"ast":null,"code":"var _jsxFileName = \"/Users/raypo/Desktop/Projectos/CoronaStatus/components/Table/Table.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport styled, { withTheme } from 'styled-components';\nimport Cell from './Cell';\nimport './DataTable.css';\nvar Table = styled(table).withConfig({\n  displayName: \"Table\",\n  componentId: \"sc-135jno9-0\"\n})([\"border-spacing:0px;background:#fff;box-shadow:0 1px 0 0 rgba(22,29,37,0.05);\"]);\nexport default (function (_ref) {\n  var headings = _ref.headings,\n      theme = _ref.theme,\n      isHeb = _ref.isHeb,\n      rows = _ref.rows;\n\n  var renderHeadingRow = function renderHeadingRow(_cell, cellIndex) {\n    return __jsx(Cell, {\n      content: headings[cellIndex],\n      header: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    });\n  };\n\n  var renderRow = function renderRow(_row, rowIndex) {\n    return __jsx(\"tr\", {\n      key: \"row-\".concat(rowIndex),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, rows[rowIndex].map(function (_cell, cellIndex) {\n      return __jsx(Cell, {\n        content: rows[rowIndex][cellIndex],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      });\n    }), \") const theadMarkup = (\", headings.map(renderHeadingRow));\n  };\n\n  var tbodyMarkup = rows.map(renderRow);\n  return __jsx(React.Fragment, null, __jsx(Table, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, __jsx(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, theadMarkup), __jsx(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, tbodyMarkup)));\n});","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/components/Table/Table.js"],"names":["styled","withTheme","Cell","Table","table","headings","theme","isHeb","rows","renderHeadingRow","_cell","cellIndex","renderRow","_row","rowIndex","map","tbodyMarkup","theadMarkup"],"mappings":";;;AAAA,OAAOA,MAAP,IAAiBC,SAAjB,QAAkC,mBAAlC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,iBAAP;AAEA,IAAMC,KAAK,GAAGH,MAAM,CAACI,KAAD,CAAT;AAAA;AAAA;AAAA,oFAAX;AAMA,gBAAe,gBAAsC;AAAA,MAAnCC,QAAmC,QAAnCA,QAAmC;AAAA,MAAzBC,KAAyB,QAAzBA,KAAyB;AAAA,MAAlBC,KAAkB,QAAlBA,KAAkB;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAEnD,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAQC,SAAR;AAAA,WACvB,MAAC,IAAD;AACE,MAAA,OAAO,EAAGN,QAAQ,CAACM,SAAD,CADpB;AAEE,MAAA,MAAM,EAAE,IAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADuB;AAAA,GAAzB;;AAOA,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD,EAAOC,QAAP;AAAA,WAChB;AAAI,MAAA,GAAG,gBAASA,QAAT,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACIN,IAAI,CAACM,QAAD,CAAJ,CAAeC,GAAf,CAAmB,UAACL,KAAD,EAAQC,SAAR;AAAA,aACf,MAAC,IAAD;AACE,QAAA,OAAO,EAAEH,IAAI,CAACM,QAAD,CAAJ,CAAeH,SAAf,CADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADe;AAAA,KAAnB,CADJ,6BAUKN,QAAQ,CAACU,GAAT,CAAaN,gBAAb,CAVL,CADgB;AAAA,GAAlB;;AAeE,MAAMO,WAAW,GAAGR,IAAI,CAACO,GAAL,CAASH,SAAT,CAApB;AAEA,SACE,4BACA,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQK,WAAR,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQD,WAAR,CAFF,CADA,CADF;AAUH,CApCD","sourcesContent":["import styled, { withTheme } from 'styled-components'\nimport Cell from './Cell';\nimport './DataTable.css';\n\nconst Table = styled(table)`\n  border-spacing: 0px;\n  background: #fff;\n  box-shadow: 0 1px 0 0 rgba(22, 29, 37, 0.05);\n`\n\nexport default ({ headings, theme, isHeb, rows }) => {\n\n  const renderHeadingRow = (_cell, cellIndex) => (\n    <Cell\n      content={ headings[cellIndex] }\n      header={true}\n    />\n  )\n\n  const renderRow = (_row, rowIndex) => (\n    <tr key={`row-${rowIndex}`}>\n      { rows[rowIndex].map((_cell, cellIndex) => (\n            <Cell\n              content={rows[rowIndex][cellIndex]}\n            />\n        )\n      )}\n  )\n\n    const theadMarkup = (\n        {headings.map(renderHeadingRow)}\n      </tr>\n    );\n\n    const tbodyMarkup = rows.map(renderRow);\n\n    return (\n      <>\n      <Table>\n        <thead>{theadMarkup}</thead>\n        <tbody>{tbodyMarkup}</tbody>\n      </ Table>\n      </>\n    );\n\n\n}\n"]},"metadata":{},"sourceType":"module"}