{"ast":null,"code":"var _jsxFileName = \"/Users/raypo/Desktop/Projectos/CoronaStatus/context/LocaleContext.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect, useRef, createContext } from 'react';\nexport const LocaleContext = createContext();\nexport const LocaleProvider = props => {\n  // Default Setting\n  const initialState = 'he';\n  const {\n    0: locale,\n    1: setLoc\n  } = useState(initialState);\n  const prev = useRef();\n  useEffect(() => {\n    if (locale === 'he') {\n      const langName = JSON.parse(localStorage.getItem('locale'));\n\n      if (langName) {\n        console.log('reading {LOCALE} to storage');\n        prev.current = langName;\n        setLoc(locale);\n      }\n    } else if (prev.langName !== locale) {\n      console.log('writing {LOCALE} to storage');\n      localStorage.setItem('locale', JSON.stringify(locale));\n    }\n  }, [locale]);\n  return __jsx(LocaleContext.Provider, {\n    value: {\n      locale,\n      setLocale: value => setLoc(_objectSpread({}, locale, {\n        locale: value\n      }))\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, props.children);\n};","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/context/LocaleContext.js"],"names":["useState","useEffect","useRef","createContext","LocaleContext","LocaleProvider","props","initialState","locale","setLoc","prev","langName","JSON","parse","localStorage","getItem","console","log","current","setItem","stringify","setLocale","value","children"],"mappings":";;;;;;;;;;AAAA,SACEA,QADF,EAEEC,SAFF,EAGEC,MAHF,EAIEC,aAJF,QAKO,OALP;AAQA,OAAO,MAAMC,aAAa,GAAGD,aAAa,EAAnC;AAEP,OAAO,MAAME,cAAc,GAAIC,KAAD,IAAW;AACvC;AACA,QAAMC,YAAY,GAAG,IAArB;AAEA,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAmBT,QAAQ,CAACO,YAAD,CAAjC;AACA,QAAMG,IAAI,GAAGR,MAAM,EAAnB;AAGAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,MAAM,KAAK,IAAf,EAAqB;AACjB,YAAMG,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAX,CAAjB;;AACA,UAAIJ,QAAJ,EAAc;AACZK,QAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACAP,QAAAA,IAAI,CAACQ,OAAL,GAAeP,QAAf;AACAF,QAAAA,MAAM,CAACD,MAAD,CAAN;AACD;AACJ,KAPD,MAOO,IAAIE,IAAI,CAACC,QAAL,KAAkBH,MAAtB,EAA8B;AACnCQ,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACAH,MAAAA,YAAY,CAACK,OAAb,CAAqB,QAArB,EAA+BP,IAAI,CAACQ,SAAL,CAAeZ,MAAf,CAA/B;AACD;AACF,GAZQ,EAYN,CAACA,MAAD,CAZM,CAAT;AAcA,SACE,MAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAAEA,MAAAA,MAAF;AAAUa,MAAAA,SAAS,EAAGC,KAAD,IAAWb,MAAM,mBAAMD,MAAN;AAAcA,QAAAA,MAAM,EAAEc;AAAtB;AAAtC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGhB,KAAK,CAACiB,QADT,CADF;AAKD,CA3BM","sourcesContent":["import {\n  useState,\n  useEffect,\n  useRef,\n  createContext\n} from 'react'\n\n\nexport const LocaleContext = createContext()\n\nexport const LocaleProvider = (props) => {\n  // Default Setting\n  const initialState = 'he'\n\n  const [locale, setLoc] = useState(initialState)\n  const prev = useRef()\n\n\n  useEffect(() => {\n    if (locale === 'he') {\n        const langName = JSON.parse(localStorage.getItem('locale'))\n        if (langName) {\n          console.log('reading {LOCALE} to storage');\n          prev.current = langName\n          setLoc(locale)\n        }\n    } else if (prev.langName !== locale) {\n      console.log('writing {LOCALE} to storage');\n      localStorage.setItem('locale', JSON.stringify(locale))\n    }\n  }, [locale])\n\n  return (\n    <LocaleContext.Provider value={{ locale, setLocale: (value) => setLoc({ ...locale, locale: value  }) } }>\n      {props.children}\n    </LocaleContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}