{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/raypo/Desktop/Projectos/CoronaStatus/pages/Statistics.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport { Heading, Button, Paragraph, FadeIn, simpleWrapper, Container } from '../components/S';\nimport HeaderDescription from '../components/HeaderDescription';\nimport styled, { withTheme } from 'styled-components'; // import Link from 'next/link'\n\nimport axios from 'axios';\nimport Table from '../components/Table/Table';\nvar baseURL = \"https://corona.lmao.ninja/countries\";\n\nvar Statistics = function Statistics(_ref) {\n  var isHeb = _ref.isHeb,\n      news = _ref.news;\n\n  var _useState = useState(),\n      rows = _useState[0],\n      setData = _useState[1];\n\n  var _useState2 = useState(true),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var engHeader = \"You are presented with updated data regarding Coronavirus statistics, delivered to you by a great project called Worldometers.\";\n  var hebHeader = \"\\u05D1\\u05E4\\u05E0\\u05D9\\u05DB\\u05DD \\u05E0\\u05EA\\u05D5\\u05E0\\u05D9\\u05DD \\u05E2\\u05D3\\u05DB\\u05E0\\u05D9\\u05D9\\u05DD \\u05D0\\u05D5\\u05D3\\u05D5\\u05EA \\u05D4\\u05E0\\u05D2\\u05D9\\u05E3 \\u05D0\\u05E9\\u05E8 \\u05DE\\u05D5\\u05D1\\u05D0\\u05D9\\u05DD \\u05DB\\u05D0\\u05DF \\u05D1\\u05E2\\u05D6\\u05E8\\u05EA \\u05D4\\u05E4\\u05E8\\u05D5\\u05D9\\u05E7\\u05D8 \\u05D4\\u05E0\\u05D4\\u05D3\\u05E8 \\u05D1\\u05E9\\u05DD worldometers\";\n  var text = isHeb && hebHeader || engHeader;\n  useEffect(function () {\n    function fetchData() {\n      var _ref2, data;\n\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(axios.get('https://corona.lmao.ninja/countries/'));\n\n            case 3:\n              _ref2 = _context.sent;\n              data = _ref2.data;\n              setData(data.map(function (_ref3) {\n                var country = _ref3.country,\n                    cases = _ref3.cases,\n                    active = _ref3.active,\n                    deaths = _ref3.deaths,\n                    recovered = _ref3.recovered,\n                    critical = _ref3.critical,\n                    todayDeaths = _ref3.todayDeaths,\n                    todayCases = _ref3.todayCases;\n                return [country, cases, active, deaths, recovered, critical, todayDeaths, todayCases];\n              }));\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    fetchData();\n    setLoading(false);\n  }, []);\n  if (loading) return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \" Loading Contents . . .\");\n  var engHeaders = ['country', 'cases', 'active', 'recovered', 'critical', 'deaths', 'todayDeaths', 'todayCases'];\n  var hebHeaders = ['מדינה', 'נדבקים', 'פעילים', 'החלימו', 'קריטי', 'מוות', 'מתו היום', 'מקרים חדשים'];\n  console.log(rows);\n\n  var renderTable = rows && headers && __jsx(Table, {\n    headings: headers,\n    rows: rows,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  });\n\n  return __jsx(React.Fragment, null, __jsx(HeaderDescription, {\n    txt: text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), renderTable);\n}; //\n// Statistics.getInitialProps = async ctx => {\n//     const data = await axios\n//       .get('https://corona.lmao.ninja/countries/')\n//     const news = data\n//     return news\n// }\n\n\nexport default Statistics;","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/pages/Statistics.js"],"names":["useState","useEffect","Heading","Button","Paragraph","FadeIn","simpleWrapper","Container","HeaderDescription","styled","withTheme","axios","Table","baseURL","Statistics","isHeb","news","rows","setData","loading","setLoading","engHeader","hebHeader","text","fetchData","get","data","map","country","cases","active","deaths","recovered","critical","todayDeaths","todayCases","engHeaders","hebHeaders","console","log","renderTable","headers"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { Heading, Button, Paragraph, FadeIn, simpleWrapper, Container } from '../components/S'\nimport HeaderDescription from '../components/HeaderDescription'\nimport styled, { withTheme } from 'styled-components'\n// import Link from 'next/link'\nimport axios from 'axios'\nimport Table from '../components/Table/Table'\n\nconst baseURL = `https://corona.lmao.ninja/countries`\n\nconst Statistics = ({ isHeb, news }) => {\n\n  const [rows, setData] = useState();\n  const [ loading, setLoading ] = useState(true)\n\n  const engHeader = `You are presented with updated data regarding Coronavirus statistics, delivered to you by a great project called Worldometers.`\n  const hebHeader = `בפניכם נתונים עדכניים אודות הנגיף אשר מובאים כאן בעזרת הפרויקט הנהדר בשם worldometers`\n  const text = isHeb && hebHeader || engHeader\n\n\n  useEffect(() => {\n      async function fetchData(){\n        setLoading(true)\n        const { data } = await axios.get('https://corona.lmao.ninja/countries/')\n\n        setData(data.map(({ country, cases, active, deaths, recovered, critical, todayDeaths, todayCases, }) => [country, cases, active, deaths, recovered, critical, todayDeaths, todayCases]))\n      }\n    fetchData()\n    setLoading(false)\n  }, [])\n\n  if ( loading ) return <div> Loading Contents . . .</div>\n\n  const engHeaders = [ 'country', 'cases', 'active', 'recovered', 'critical', 'deaths', 'todayDeaths', 'todayCases']\n  const hebHeaders = [ 'מדינה', 'נדבקים', 'פעילים', 'החלימו', 'קריטי', 'מוות', 'מתו היום', 'מקרים חדשים' ]\n\n  console.log(rows);\n\n  const renderTable = rows && headers && <Table headings={headers} rows={rows} />\n  return (\n    <>\n      <HeaderDescription txt={text} />\n      {renderTable}\n\n    </>\n  )\n\n}\n//\n// Statistics.getInitialProps = async ctx => {\n//     const data = await axios\n//       .get('https://corona.lmao.ninja/countries/')\n//     const news = data\n//     return news\n// }\n\nexport default Statistics\n"]},"metadata":{},"sourceType":"module"}