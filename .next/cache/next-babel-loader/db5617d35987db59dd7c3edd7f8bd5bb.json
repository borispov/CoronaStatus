{"ast":null,"code":"var _jsxFileName = \"/Users/raypo/Desktop/Projectos/CoronaStatus/context/LocaleContext.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useRef, createContext } from 'react'; // import { useRouter } from 'next/dist/client/router'\n\nexport const LocaleContext = createContext();\nexport const LocaleProvider = props => {\n  // Default Setting\n  const initialState = 'he';\n  const {\n    0: locale,\n    1: setLocale\n  } = useState(initialState);\n  const prev = useRef();\n  useEffect(() => {\n    if (locale === 'he') {\n      const langName = JSON.parse(localStorage.getItem('locale'));\n\n      if (langName) {\n        prev.current = langName;\n        setLocale(locale);\n      }\n    } else if (locale !== localStorage.getItem('locale')) {\n      localStorage.setItem('locale', JSON.stringify(locale));\n    }\n  }, [locale]); // sync locale value on client-side route changes\n  // React.useEffect(() => {\n  //   if (typeof query.lang === 'string' && isLocale(query.lang) && locale !== query.lang) {\n  //     setLocale(query.lang)\n  //   }\n  // }, [query.lang, locale])\n\n  return __jsx(LocaleContext.Provider, {\n    value: [locale, setLocale],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, props.children);\n};","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/context/LocaleContext.js"],"names":["useState","useEffect","useRef","createContext","LocaleContext","LocaleProvider","props","initialState","locale","setLocale","prev","langName","JSON","parse","localStorage","getItem","current","setItem","stringify","children"],"mappings":";;;AAAA,SACEA,QADF,EAEEC,SAFF,EAGEC,MAHF,EAIEC,aAJF,QAKO,OALP,C,CAMA;;AAGA,OAAO,MAAMC,aAAa,GAAGD,aAAa,EAAnC;AAEP,OAAO,MAAME,cAAc,GAAIC,KAAD,IAAW;AACvC;AACA,QAAMC,YAAY,GAAG,IAArB;AAEA,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBT,QAAQ,CAACO,YAAD,CAApC;AACA,QAAMG,IAAI,GAAGR,MAAM,EAAnB;AAGAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,MAAM,KAAK,IAAf,EAAqB;AACjB,YAAMG,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAX,CAAjB;;AACA,UAAIJ,QAAJ,EAAc;AACZD,QAAAA,IAAI,CAACM,OAAL,GAAeL,QAAf;AACAF,QAAAA,SAAS,CAACD,MAAD,CAAT;AACD;AACJ,KAND,MAMO,IAAIA,MAAM,KAAKM,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAf,EAA+C;AACpDD,MAAAA,YAAY,CAACG,OAAb,CAAqB,QAArB,EAA+BL,IAAI,CAACM,SAAL,CAAeV,MAAf,CAA/B;AACD;AACF,GAVQ,EAUN,CAACA,MAAD,CAVM,CAAT,CARuC,CAoBvC;AACA;AACA;AACA;AACA;AACA;;AAEA,SACE,MAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE,CAAEA,MAAF,EAAUC,SAAV,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,KAAK,CAACa,QADT,CADF;AAKD,CAhCM","sourcesContent":["import {\n  useState,\n  useEffect,\n  useRef,\n  createContext\n} from 'react'\n// import { useRouter } from 'next/dist/client/router'\n\n\nexport const LocaleContext = createContext()\n\nexport const LocaleProvider = (props) => {\n  // Default Setting\n  const initialState = 'he'\n\n  const [locale, setLocale] = useState(initialState)\n  const prev = useRef()\n\n\n  useEffect(() => {\n    if (locale === 'he') {\n        const langName = JSON.parse(localStorage.getItem('locale'))\n        if (langName) {\n          prev.current = langName\n          setLocale(locale)\n        }\n    } else if (locale !== localStorage.getItem('locale')) {\n      localStorage.setItem('locale', JSON.stringify(locale))\n    }\n  }, [locale])\n\n  // sync locale value on client-side route changes\n  // React.useEffect(() => {\n  //   if (typeof query.lang === 'string' && isLocale(query.lang) && locale !== query.lang) {\n  //     setLocale(query.lang)\n  //   }\n  // }, [query.lang, locale])\n\n  return (\n    <LocaleContext.Provider value={[ locale, setLocale ]}>\n      {props.children}\n    </LocaleContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}