{"ast":null,"code":"var defaultLocale = 'he';\nimport { useContext } from 'react';\nimport { LocaleContext } from '../context/LocaleContext';\nimport { strings } from '../locales/translations';\nexport default function useTranslation() {\n  var _useContext = useContext(LocaleContext),\n      locale = _useContext.locale;\n\n  var t = function t(key, key2) {\n    if (!strings[locale][key] || !strings[locale][key][key2]) {\n      console.warn(\"Translation '\".concat(key, \"' for locale '\").concat(locale, \"' not found.\"));\n    }\n\n    if (!key2) {\n      return strings[locale][key] || strings[defaultLocale][key] || '';\n    }\n\n    return strings[locale][key2][key] || strings[defaultLocale][key2][key] || '';\n  };\n\n  return {\n    t: t,\n    locale: locale\n  };\n}","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/hooks/useTranslation.js"],"names":["defaultLocale","useContext","LocaleContext","strings","useTranslation","locale","t","key","key2","console","warn"],"mappings":"AAAA,IAAMA,aAAa,GAAG,IAAtB;AAEA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,OAAT,QAAwB,yBAAxB;AAEA,eAAe,SAASC,cAAT,GAA0B;AAAA,oBACpBH,UAAU,CAACC,aAAD,CADU;AAAA,MAC/BG,MAD+B,eAC/BA,MAD+B;;AAGvC,MAAMC,CAAC,GAAG,SAAJA,CAAI,CAACC,GAAD,EAAMC,IAAN,EAAe;AAEvB,QAAI,CAACL,OAAO,CAACE,MAAD,CAAP,CAAgBE,GAAhB,CAAD,IAAyB,CAACJ,OAAO,CAACE,MAAD,CAAP,CAAgBE,GAAhB,EAAqBC,IAArB,CAA9B,EAA0D;AACxDC,MAAAA,OAAO,CAACC,IAAR,wBAA6BH,GAA7B,2BAAiDF,MAAjD;AACD;;AAED,QAAI,CAACG,IAAL,EAAW;AACT,aAAOL,OAAO,CAACE,MAAD,CAAP,CAAgBE,GAAhB,KAAwBJ,OAAO,CAACH,aAAD,CAAP,CAAuBO,GAAvB,CAAxB,IAAuD,EAA9D;AACD;;AACD,WAAOJ,OAAO,CAACE,MAAD,CAAP,CAAgBG,IAAhB,EAAsBD,GAAtB,KAA8BJ,OAAO,CAACH,aAAD,CAAP,CAAuBQ,IAAvB,EAA6BD,GAA7B,CAA9B,IAAmE,EAA1E;AACD,GAVD;;AAYA,SAAO;AACLD,IAAAA,CAAC,EAADA,CADK;AAELD,IAAAA,MAAM,EAANA;AAFK,GAAP;AAID","sourcesContent":["const defaultLocale = 'he'\n\nimport { useContext } from 'react'\nimport { LocaleContext } from '../context/LocaleContext'\nimport { strings } from '../locales/translations'\n\nexport default function useTranslation() {\n  const { locale } = useContext(LocaleContext)\n\n  const t = (key, key2) => {\n\n    if (!strings[locale][key] || !strings[locale][key][key2]) {\n      console.warn(`Translation '${key}' for locale '${locale}' not found.`)\n    }\n\n    if (!key2) {\n      return strings[locale][key] || strings[defaultLocale][key] || ''\n    }\n    return strings[locale][key2][key] || strings[defaultLocale][key2][key] || ''\n  }\n\n  return {\n    t,\n    locale\n  }\n}\n"]},"metadata":{},"sourceType":"module"}