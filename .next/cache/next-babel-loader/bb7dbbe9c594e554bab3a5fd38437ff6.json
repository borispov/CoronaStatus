{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport sortForChart from './sortForChart';\nconst baseURL = `http://46.101.156.51:3003/api/v1/alltime/`;\n\nasync function currentCountry() {\n  return await axios.get('https://extreme-ip-lookup.com/json/').then(res => res.data.country).catch(e => 'israel');\n}\n\nasync function useTime(loc, url = baseURL) {\n  const {\n    0: timeStats,\n    1: setData\n  } = useState();\n  const {\n    0: countryStats,\n    1: setCountryStats\n  } = useState();\n  const {\n    0: timeLoading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: timeError,\n    1: setError\n  } = useState(false);\n  const {\n    0: country,\n    1: setCountry\n  } = useState(loc);\n  useEffect(() => {\n    (async () => {\n      let geoLocation = await currentCountry();\n      setCountry(geoLocation);\n    })();\n  }, []);\n\n  async function fetchData(cn) {\n    if (typeof cn !== 'string') {\n      return;\n    }\n\n    setLoading(true);\n    setError();\n    const isWorld = cn === 'world';\n    const URL = cn === 'world' ? baseURL : baseURL + country;\n    const data = await axios.get(URL).then(res => res.data).catch(err => setError(err));\n    const timeStats = sortForChart(data);\n    isWorld ? setData(timeStats) : setCountryStats(timeStats);\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    fetchData('world');\n  }, []);\n  useEffect(() => {\n    country.length && fetchData(country);\n  }, [country]);\n\n  if (timeLoading || timeError) {\n    console.log('returning loading or error');\n    return {\n      timeLoading,\n      timeError\n    };\n  }\n\n  if (countryStats && timeStats) {\n    console.log('returning DATA');\n    console.log(countryStats);\n    return {\n      countryStats,\n      timeStats\n    };\n  } // return {\n  //   countryStats, timeStats, timeLoading, timeError\n  // }\n\n}\n\nexport default useTime;","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/utils/useTime.js"],"names":["useState","useEffect","axios","sortForChart","baseURL","currentCountry","get","then","res","data","country","catch","e","useTime","loc","url","timeStats","setData","countryStats","setCountryStats","timeLoading","setLoading","timeError","setError","setCountry","geoLocation","fetchData","cn","isWorld","URL","err","length","console","log"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,MAAMC,OAAO,GAAI,2CAAjB;;AAEA,eAAeC,cAAf,GAA+B;AAC7B,SAAO,MAAMH,KAAK,CACfI,GADU,CACN,qCADM,EAEVC,IAFU,CAELC,GAAG,IAAIA,GAAG,CAACC,IAAJ,CAASC,OAFX,EAGVC,KAHU,CAGJC,CAAC,IAAI,QAHD,CAAb;AAID;;AAED,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAAG,GAAGX,OAAlC,EAA2C;AACzC,QAAM;AAAA,OAACY,SAAD;AAAA,OAAYC;AAAZ,MAAuBjB,QAAQ,EAArC;AACA,QAAM;AAAA,OAACkB,YAAD;AAAA,OAAeC;AAAf,MAAkCnB,QAAQ,EAAhD;AACA,QAAM;AAAA,OAACoB,WAAD;AAAA,OAAcC;AAAd,MAA4BrB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAACsB,SAAD;AAAA,OAAYC;AAAZ,MAAwBvB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAAA,OAACU,OAAD;AAAA,OAAUc;AAAV,MAAwBxB,QAAQ,CAACc,GAAD,CAAtC;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACd,KAAC,YAAY;AACX,UAAIwB,WAAW,GAAG,MAAMpB,cAAc,EAAtC;AACAmB,MAAAA,UAAU,CAACC,WAAD,CAAV;AACD,KAHD;AAID,GALQ,EAKN,EALM,CAAT;;AAOA,iBAAeC,SAAf,CAAyBC,EAAzB,EAA6B;AAC3B,QAAI,OAAOA,EAAP,KAAc,QAAlB,EAA4B;AAAC;AAAO;;AACpCN,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,IAAAA,QAAQ;AAER,UAAMK,OAAO,GAAGD,EAAE,KAAK,OAAvB;AACA,UAAME,GAAG,GAAIF,EAAE,KAAK,OAAP,GAAiBvB,OAAjB,GAA2BA,OAAO,GAAGM,OAAlD;AACA,UAAMD,IAAI,GAAG,MAAMP,KAAK,CAACI,GAAN,CAAUuB,GAAV,EAChBtB,IADgB,CACXC,GAAG,IAAIA,GAAG,CAACC,IADA,EAEhBE,KAFgB,CAEVmB,GAAG,IAAIP,QAAQ,CAACO,GAAD,CAFL,CAAnB;AAGA,UAAMd,SAAS,GAAGb,YAAY,CAACM,IAAD,CAA9B;AACAmB,IAAAA,OAAO,GAAGX,OAAO,CAACD,SAAD,CAAV,GAAwBG,eAAe,CAACH,SAAD,CAA9C;AACAK,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD;;AAEDpB,EAAAA,SAAS,CAAC,MAAM;AACdyB,IAAAA,SAAS,CAAC,OAAD,CAAT;AACD,GAFQ,EAEN,EAFM,CAAT;AAIAzB,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,OAAO,CAACqB,MAAR,IAAkBL,SAAS,CAAChB,OAAD,CAA3B;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;;AAIA,MAAIU,WAAW,IAAIE,SAAnB,EAA8B;AAC5BU,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACA,WAAO;AAACb,MAAAA,WAAD;AAAcE,MAAAA;AAAd,KAAP;AACD;;AAED,MAAIJ,YAAY,IAAIF,SAApB,EAA+B;AAC7BgB,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYf,YAAZ;AACA,WAAO;AAAEA,MAAAA,YAAF;AAAgBF,MAAAA;AAAhB,KAAP;AACD,GA9CwC,CAgDzC;AACA;AACA;;AACD;;AAED,eAAeH,OAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport sortForChart from './sortForChart'\n\nconst baseURL = `http://46.101.156.51:3003/api/v1/alltime/`\n\nasync function currentCountry(){\n  return await axios\n    .get('https://extreme-ip-lookup.com/json/')\n    .then(res => res.data.country)\n    .catch(e => 'israel')\n}\n\nasync function useTime(loc, url = baseURL) {\n  const [timeStats, setData] = useState();\n  const [countryStats, setCountryStats] = useState();\n  const [timeLoading, setLoading] = useState(false);\n  const [timeError, setError] = useState(false);\n  const [country, setCountry] = useState(loc)\n\n  useEffect(() => {\n    (async () => {\n      let geoLocation = await currentCountry()\n      setCountry(geoLocation)\n    })()\n  }, [])\n\n  async function fetchData(cn) {\n    if (typeof cn !== 'string') {return}\n    setLoading(true)\n    setError()\n\n    const isWorld = cn === 'world'\n    const URL =  cn === 'world' ? baseURL : baseURL + country\n    const data = await axios.get(URL)\n      .then(res => res.data)\n      .catch(err => setError(err))\n    const timeStats = sortForChart(data);\n    isWorld ? setData(timeStats) : setCountryStats(timeStats)\n    setLoading(false)\n  }\n\n  useEffect(() => {\n    fetchData('world')\n  }, [])\n\n  useEffect(() => {\n    country.length && fetchData(country);\n  }, [country])\n\n  if (timeLoading || timeError) {\n    console.log('returning loading or error');\n    return {timeLoading, timeError}\n  }\n\n  if (countryStats && timeStats) {\n    console.log('returning DATA');\n    console.log(countryStats);\n    return { countryStats, timeStats }\n  }\n\n  // return {\n  //   countryStats, timeStats, timeLoading, timeError\n  // }\n}\n\nexport default useTime;\n"]},"metadata":{},"sourceType":"module"}