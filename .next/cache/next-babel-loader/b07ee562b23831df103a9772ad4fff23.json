{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/raypo/Desktop/Projectos/CoronaStatus/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  color: \", \";\\n  background-color: \", \";\\n  border-radius: 50%;\\n  position: absolute;\\n  top: \", \";\\n  left: \", \";\\n  right: \", \";\\n  padding: 6px 2px;\\n  outline: none;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport CoronaApp from '../components/CoronaApp';\nimport styled, { ThemeProvider } from 'styled-components';\nimport GlobalStyle from './Global';\nimport { useState } from 'react';\nimport { themes } from '../utils/themes';\n\nvar lightTheme = function lightTheme() {\n  return _objectSpread({}, themes['common'], {}, themes['light']);\n};\n\nvar darkTheme = function darkTheme() {\n  return _objectSpread({}, themes['common'], {}, themes['dark']);\n};\n\nvar Btn = styled.button(_templateObject(), function (props) {\n  return props.theme.bgColor;\n}, function (props) {\n  return props.theme.color;\n}, function (props) {\n  return props.top;\n}, function (props) {\n  return props.left;\n}, function (props) {\n  return props.right;\n});\nexport default function IndexPage() {\n  var _useState = useState(lightTheme()),\n      theme = _useState[0],\n      setTheme = _useState[1];\n\n  var setDarkTheme = function setDarkTheme() {\n    return setTheme(darkTheme());\n  };\n\n  var setLightTheme = function setLightTheme() {\n    return setTheme(lightTheme());\n  };\n\n  var _useState2 = useState('heb'),\n      lang = _useState2[0],\n      setLang = _useState2[1];\n\n  var isLight = theme.type === 'light';\n  return __jsx(React.Fragment, null, __jsx(ThemeProvider, {\n    theme: theme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, __jsx(GlobalStyle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), __jsx(CoronaApp, {\n    theme: theme,\n    lang: lang,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), __jsx(Btn, {\n    onClick: lang === 'heb' ? setLang('eng') : setLang('heb'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"ENg | Heb\"), __jsx(Btn, {\n    onClick: !isLight ? setLightTheme : setDarkTheme,\n    top: \"5%\",\n    left: \"1%\",\n    right: \"0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, !isLight ? 'Light' : 'Dark')));\n}","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/pages/index.js"],"names":["CoronaApp","styled","ThemeProvider","GlobalStyle","useState","themes","lightTheme","darkTheme","Btn","button","props","theme","bgColor","color","top","left","right","IndexPage","setTheme","setDarkTheme","setLightTheme","lang","setLang","isLight","type"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,yBAAtB;AACA,OAAOC,MAAP,IAAiBC,aAAjB,QAAsC,mBAAtC;AACA,OAAOC,WAAP,MAAwB,UAAxB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,MAAT,QAAuB,iBAAvB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,2BACdD,MAAM,CAAC,QAAD,CADQ,MAEdA,MAAM,CAAC,OAAD,CAFQ;AAAA,CAAnB;;AAKA,IAAME,SAAS,GAAG,SAAZA,SAAY;AAAA,2BACbF,MAAM,CAAC,QAAD,CADO,MAEbA,MAAM,CAAC,MAAD,CAFO;AAAA,CAAlB;;AAKA,IAAMG,GAAG,GAAGP,MAAM,CAACQ,MAAV,oBACE,UAAAC,KAAK;AAAA,SAAIA,KAAK,CAACC,KAAN,CAAYC,OAAhB;AAAA,CADP,EAEa,UAAAF,KAAK;AAAA,SAAIA,KAAK,CAACC,KAAN,CAAYE,KAAhB;AAAA,CAFlB,EAKA,UAAAH,KAAK;AAAA,SAAIA,KAAK,CAACI,GAAV;AAAA,CALL,EAMC,UAAAJ,KAAK;AAAA,SAAIA,KAAK,CAACK,IAAV;AAAA,CANN,EAOE,UAAAL,KAAK;AAAA,SAAIA,KAAK,CAACM,KAAV;AAAA,CAPP,CAAT;AAYA,eAAe,SAASC,SAAT,GAAqB;AAAA,kBACRb,QAAQ,CAACE,UAAU,EAAX,CADA;AAAA,MAC3BK,KAD2B;AAAA,MACpBO,QADoB;;AAElC,MAAMC,YAAY,GAAG,SAAfA,YAAe;AAAA,WAAMD,QAAQ,CAACX,SAAS,EAAV,CAAd;AAAA,GAArB;;AACA,MAAMa,aAAa,GAAG,SAAhBA,aAAgB;AAAA,WAAMF,QAAQ,CAACZ,UAAU,EAAX,CAAd;AAAA,GAAtB;;AAHkC,mBAIVF,QAAQ,CAAC,KAAD,CAJE;AAAA,MAI3BiB,IAJ2B;AAAA,MAIrBC,OAJqB;;AAKlC,MAAMC,OAAO,GAAGZ,KAAK,CAACa,IAAN,KAAe,OAA/B;AAEA,SACE,4BACE,MAAC,aAAD;AAAe,IAAA,KAAK,EAAEb,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,SAAD;AAAW,IAAA,KAAK,EAAEA,KAAlB;AAAyB,IAAA,IAAI,EAAEU,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,MAAC,GAAD;AACE,IAAA,OAAO,EAAEA,IAAI,KAAK,KAAT,GAAiBC,OAAO,CAAC,KAAD,CAAxB,GAAkCA,OAAO,CAAC,KAAD,CADpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHF,EAME,MAAC,GAAD;AAAK,IAAA,OAAO,EAAE,CAACC,OAAD,GAAWH,aAAX,GAA2BD,YAAzC;AAAuD,IAAA,GAAG,EAAC,IAA3D;AAAgE,IAAA,IAAI,EAAC,IAArE;AAA0E,IAAA,KAAK,EAAC,GAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACI,OAAD,GAAW,OAAX,GAAqB,MADxB,CANF,CADF,CADF;AAcD","sourcesContent":["import CoronaApp from '../components/CoronaApp'\nimport styled, { ThemeProvider } from 'styled-components'\nimport GlobalStyle from './Global'\nimport { useState } from 'react'\nimport { themes } from '../utils/themes'\n\nconst lightTheme = () => ({\n  ...themes['common'],\n  ...themes['light'],\n})\n\nconst darkTheme = () => ({\n  ...themes['common'],\n  ...themes['dark'],\n})\n\nconst Btn = styled.button`\n  color: ${props => props.theme.bgColor};\n  background-color: ${props => props.theme.color};\n  border-radius: 50%;\n  position: absolute;\n  top: ${props => props.top};\n  left: ${props => props.left};\n  right: ${props => props.right};\n  padding: 6px 2px;\n  outline: none;\n`\n\nexport default function IndexPage() {\n  const [theme, setTheme] = useState(lightTheme())\n  const setDarkTheme = () => setTheme(darkTheme())\n  const setLightTheme = () => setTheme(lightTheme())\n  const [lang, setLang] = useState('heb');\n  const isLight = theme.type === 'light'\n\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <CoronaApp theme={theme} lang={lang} />\n        <Btn \n          onClick={lang === 'heb' ? setLang('eng') : setLang('heb')}\n        >ENg | Heb</Btn>\n        <Btn onClick={!isLight ? setLightTheme : setDarkTheme} top=\"5%\" left=\"1%\" right='0'>\n          {!isLight ? 'Light' : 'Dark'}\n        </Btn>\n      </ThemeProvider>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}