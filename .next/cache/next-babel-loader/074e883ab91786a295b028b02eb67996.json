{"ast":null,"code":"var _jsxFileName = \"/Users/raypo/Desktop/Projectos/CoronaStatus/components/CaseChart.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport axios from 'axios';\nimport useTime from '../utils/useTime';\nimport sortForChart from '../utils/sortForChart';\nimport Chart from './Chart';\nimport Container from './Container';\nconst baseURL = `http://covid19.borisky.me:3003/api/v1/alltime/`;\n\nconst countryTimeData = async cn => {\n  console.log('fetchinGGGGG');\n  const loc = cn || (await currentCountry());\n  const data = await axios.get(baseURL + loc);\n  const dataRes = await sortForChart(data.data);\n  return dataRes;\n};\n\nconst worldTimeData = async () => {\n  const data = await axios.get(baseURL);\n  const dataRes = await sortForChart(data.data);\n  return dataRes;\n};\n\nasync function currentCountry() {\n  return await axios.get('https://extreme-ip-lookup.com/json/').then(res => res.data.country).catch(e => 'israel');\n}\n\nclass CaseChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // country: this.props.country,\n      worldData: [],\n      countryData: [],\n      worldLabels: [],\n      countryLabels: [],\n      worldCases: [],\n      countryCases: [],\n      showWorld: true,\n      loading: false\n    };\n  }\n\n  setShowWorld() {\n    const showWorld = !this.state.showWorld;\n    this.setState({\n      showWorld\n    });\n  }\n\n  async componentDidMount() {\n    this.setState({\n      loading: true\n    });\n\n    try {\n      const timeStats = await worldTimeData();\n      const countryStats = await countryTimeData(this.props.country);\n      const worldCases = timeStats && timeStats.datasets.filter(a => a.label === 'cases');\n      const countryCases = countryStats && countryStats.datasets.filter(a => a.label === 'cases');\n      const countryLabels = countryStats && countryStats.labels;\n      const worldLabels = timeStats && timeStats.labels;\n      this.setState({\n        worldData: timeStats,\n        countryData: countryStats,\n        worldCases,\n        countryCases,\n        worldLabels,\n        countryLabels,\n        loading: false\n      });\n    } catch (err) {\n      this.setState({\n        loading: false,\n        error: err\n      });\n    }\n  }\n\n  shouldComponentUpdate(x, y) {\n    console.log(x);\n    console.log('-------------');\n    console.log(y);\n    return true;\n  }\n\n  render() {\n    if (this.state.loading) {\n      return __jsx(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, __jsx(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Loading Data . . .\"));\n    }\n\n    if (this.state.error) {\n      return __jsx(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, __jsx(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, this.state.error));\n    }\n\n    console.log(this.state.worldCases);\n    return __jsx(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, this.state.worldData && __jsx(Chart, {\n      type: \"line\",\n      labels: this.state.showWorld ? this.state.worldLabels : this.state.countryLabels,\n      data: this.props.showWorld ? this.state.worldCases : this.state.countryCases,\n      label: \"Infection Growth - Country/World\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }) || __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \" Loading Charts ... \"));\n  }\n\n}\n\nexport default CaseChart;","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/components/CaseChart.js"],"names":["React","axios","useTime","sortForChart","Chart","Container","baseURL","countryTimeData","cn","console","log","loc","currentCountry","data","get","dataRes","worldTimeData","then","res","country","catch","e","CaseChart","Component","constructor","props","state","worldData","countryData","worldLabels","countryLabels","worldCases","countryCases","showWorld","loading","setShowWorld","setState","componentDidMount","timeStats","countryStats","datasets","filter","a","label","labels","err","error","shouldComponentUpdate","x","y","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport axios from 'axios'\nimport useTime from '../utils/useTime'\nimport sortForChart from '../utils/sortForChart'\nimport Chart from './Chart'\nimport Container from './Container'\n\nconst baseURL = `http://covid19.borisky.me:3003/api/v1/alltime/`\n\nconst countryTimeData = async (cn) => {\n  console.log('fetchinGGGGG');\n  const loc = cn || await currentCountry()\n  const data = await axios.get(baseURL+loc)\n  const dataRes = await sortForChart(data.data)\n  return dataRes\n}\n\nconst worldTimeData = async () => {\n  const data = await axios.get(baseURL)\n  const dataRes = await sortForChart(data.data)\n  return dataRes\n}\n\nasync function currentCountry(){\n  return await axios\n    .get('https://extreme-ip-lookup.com/json/')\n    .then(res => res.data.country)\n    .catch(e => 'israel')\n}\n\n\nclass CaseChart extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      // country: this.props.country,\n      worldData: [],\n      countryData: [],\n      worldLabels: [],\n      countryLabels: [],\n      worldCases: [],\n      countryCases: [],\n      showWorld: true,\n      loading: false\n    }\n  }\n\n  setShowWorld() {\n    const showWorld = !this.state.showWorld\n    this.setState({ showWorld })\n  }\n\n  async componentDidMount() {\n    this.setState({ loading: true })\n\n    try {\n      const timeStats = await worldTimeData()\n      const countryStats = await countryTimeData(this.props.country)\n      const worldCases = timeStats && timeStats.datasets.filter(a => a.label === 'cases')\n      const countryCases = countryStats && countryStats.datasets.filter(a => a.label === 'cases')\n      const countryLabels = countryStats && countryStats.labels\n      const worldLabels = timeStats && timeStats.labels\n      this.setState({\n        worldData: timeStats,\n        countryData: countryStats,\n        worldCases,\n        countryCases,\n        worldLabels,\n        countryLabels,\n        loading: false\n      })\n    } catch(err) {\n      this.setState({ loading: false, error: err })\n    }\n\n\n  }\n\n  shouldComponentUpdate(x, y){\n    console.log(x);\n    console.log('-------------');\n    console.log(y);\n    return true\n  }\n\n  render() {\n\n    if (this.state.loading) {\n      return <Container><h1>Loading Data . . .</h1></Container>\n    }\n    if (this.state.error) {\n      return <Container><h1>{this.state.error}</h1></Container>\n    }\n\n    console.log(this.state.worldCases);\n    return (\n      <Container>\n        {\n          this.state.worldData &&\n            <Chart \n              type='line'\n              labels={this.state.showWorld ? this.state.worldLabels : this.state.countryLabels}\n              data={this.props.showWorld ? this.state.worldCases : this.state.countryCases}\n              label='Infection Growth - Country/World'\n            /> || <div> Loading Charts ... </div>\n        }\n      </Container>\n    )\n  }\n\n}\n\nexport default CaseChart\n"]},"metadata":{},"sourceType":"module"}