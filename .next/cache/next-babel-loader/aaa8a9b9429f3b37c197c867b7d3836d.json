{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState, useEffect, useReducer } from 'react';\nimport axios from 'axios';\nimport sortForChart from './sortForChart';\nvar baseURL = \"http://covid19.borisky.me:3003/api/v1/alltime/\";\n\nfunction currentCountry() {\n  return _regeneratorRuntime.async(function currentCountry$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(axios.get('https://extreme-ip-lookup.com/json/').then(function (res) {\n            return res.data.country;\n          })[\"catch\"](function (e) {\n            return 'israel';\n          }));\n\n        case 2:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n} // function useTime(loc, url = baseURL) {\n\n\nfunction useTime(loc, getCountryList) {\n  var _useState = useState(),\n      countryStats = _useState[0],\n      setCountryStats = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      error = _useState3[0],\n      setError = _useState3[1];\n\n  var _useState4 = useState(),\n      countries = _useState4[0],\n      setCountries = _useState4[1];\n\n  useEffect(function () {\n    function fetchData(cn) {\n      var country, URL, data, _countries, timeStats;\n\n      return _regeneratorRuntime.async(function fetchData$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setLoading(true);\n              setError();\n              _context2.t0 = loc;\n\n              if (_context2.t0) {\n                _context2.next = 7;\n                break;\n              }\n\n              _context2.next = 6;\n              return _regeneratorRuntime.awrap(currentCountry());\n\n            case 6:\n              _context2.t0 = _context2.sent;\n\n            case 7:\n              country = _context2.t0;\n              URL = baseURL + country; // console.log(URL);\n\n              _context2.next = 11;\n              return _regeneratorRuntime.awrap(axios.get(URL).then(function (res) {\n                return res.data;\n              })[\"catch\"](function (err) {\n                return setError(err);\n              }));\n\n            case 11:\n              data = _context2.sent;\n\n              if (getCountryList) {\n                _countries = _toConsumableArray(new Set(Object.values(data).map(function (a) {\n                  return a.location;\n                })));\n                setCountries(_countries);\n                console.log(_countries);\n              }\n\n              timeStats = sortForChart(data);\n              setCountryStats(timeStats);\n              setLoading(false);\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    fetchData(loc);\n  }, [loc]);\n  return {\n    countryStats: countryStats,\n    loading: loading,\n    error: error,\n    countries: countries\n  };\n}\n\nexport default useTime;","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/utils/useTime.js"],"names":["useState","useEffect","useReducer","axios","sortForChart","baseURL","currentCountry","get","then","res","data","country","e","useTime","loc","getCountryList","countryStats","setCountryStats","loading","setLoading","error","setError","countries","setCountries","fetchData","cn","URL","err","Set","Object","values","map","a","location","console","log","timeStats"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,IAAMC,OAAO,mDAAb;;AAEA,SAAeC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACeH,KAAK,CACfI,GADU,CACN,qCADM,EAEVC,IAFU,CAEL,UAAAC,GAAG;AAAA,mBAAIA,GAAG,CAACC,IAAJ,CAASC,OAAb;AAAA,WAFE,WAGJ,UAAAC,CAAC;AAAA,mBAAI,QAAJ;AAAA,WAHG,CADf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAOA;;;AACA,SAASC,OAAT,CAAiBC,GAAjB,EAAsBC,cAAtB,EAAsC;AAAA,kBAGIf,QAAQ,EAHZ;AAAA,MAG7BgB,YAH6B;AAAA,MAGfC,eAHe;;AAAA,mBAINjB,QAAQ,CAAC,KAAD,CAJF;AAAA,MAI7BkB,OAJ6B;AAAA,MAIpBC,UAJoB;;AAAA,mBAKVnB,QAAQ,CAAC,KAAD,CALE;AAAA,MAK7BoB,KAL6B;AAAA,MAKtBC,QALsB;;AAAA,mBAMFrB,QAAQ,EANN;AAAA,MAM7BsB,SAN6B;AAAA,MAMlBC,YANkB;;AAQpCtB,EAAAA,SAAS,CAAC,YAAM;AACd,aAAeuB,SAAf,CAAyBC,EAAzB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEEN,cAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,cAAAA,QAAQ;AAHV,6BAIkBP,GAJlB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAI+BR,cAAc,EAJ7C;;AAAA;AAAA;;AAAA;AAIQK,cAAAA,OAJR;AAKQe,cAAAA,GALR,GAKcrB,OAAO,GAAGM,OALxB,EAME;;AANF;AAAA,+CAOqBR,KAAK,CAACI,GAAN,CAAUmB,GAAV,EAChBlB,IADgB,CACX,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACC,IAAR;AAAA,eADQ,WAEV,UAAAiB,GAAG;AAAA,uBAAIN,QAAQ,CAACM,GAAD,CAAZ;AAAA,eAFO,CAPrB;;AAAA;AAOQjB,cAAAA,IAPR;;AAUE,kBAAIK,cAAJ,EAAoB;AACZO,gBAAAA,UADY,sBACI,IAAIM,GAAJ,CAAQC,MAAM,CAACC,MAAP,CAAcpB,IAAd,EAAoBqB,GAApB,CAAwB,UAAAC,CAAC;AAAA,yBAAIA,CAAC,CAACC,QAAN;AAAA,iBAAzB,CAAR,CADJ;AAElBV,gBAAAA,YAAY,CAACD,UAAD,CAAZ;AACAY,gBAAAA,OAAO,CAACC,GAAR,CAAYb,UAAZ;AACD;;AACKc,cAAAA,SAfR,GAeoBhC,YAAY,CAACM,IAAD,CAfhC;AAgBEO,cAAAA,eAAe,CAACmB,SAAD,CAAf;AACAjB,cAAAA,UAAU,CAAC,KAAD,CAAV;;AAjBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBAK,IAAAA,SAAS,CAACV,GAAD,CAAT;AAED,GAtBQ,EAsBN,CAACA,GAAD,CAtBM,CAAT;AAwBA,SAAO;AACLE,IAAAA,YAAY,EAAZA,YADK;AACSE,IAAAA,OAAO,EAAPA,OADT;AACkBE,IAAAA,KAAK,EAALA,KADlB;AACyBE,IAAAA,SAAS,EAATA;AADzB,GAAP;AAGD;;AAED,eAAeT,OAAf","sourcesContent":["import { useState, useEffect, useReducer } from 'react'\nimport axios from 'axios'\nimport sortForChart from './sortForChart'\n\nconst baseURL = `http://covid19.borisky.me:3003/api/v1/alltime/`\n\nasync function currentCountry(){\n  return await axios\n    .get('https://extreme-ip-lookup.com/json/')\n    .then(res => res.data.country)\n    .catch(e => 'israel')\n}\n\n// function useTime(loc, url = baseURL) {\nfunction useTime(loc, getCountryList) {\n\n\n  const [countryStats, setCountryStats] = useState();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [countries, setCountries] = useState()\n\n  useEffect(() => {\n    async function fetchData(cn) {\n\n      setLoading(true)\n      setError()\n      const country = loc || await currentCountry()\n      const URL = baseURL + country\n      // console.log(URL);\n      const data = await axios.get(URL)\n        .then(res => res.data)\n        .catch(err => setError(err))\n      if (getCountryList) {\n        const countries = [...new Set(Object.values(data).map(a => a.location))]\n        setCountries(countries)\n        console.log(countries);\n      }\n      const timeStats = sortForChart(data);\n      setCountryStats(timeStats)\n      setLoading(false)\n    }\n    fetchData(loc)\n\n  }, [loc])\n\n  return {\n    countryStats, loading, error, countries\n  }\n}\n\nexport default useTime;\n"]},"metadata":{},"sourceType":"module"}