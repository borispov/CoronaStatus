{"ast":null,"code":"var _jsxFileName = \"/Users/raypo/Desktop/Projectos/CoronaStatus/context/LocaleContext.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useRef, createContext } from 'react'; // import { useRouter } from 'next/dist/client/router'\n\nexport const LocaleContext = React.createContext();\nexport const LocaleProvider = ({\n  lang,\n  children\n}) => {\n  // Default Setting\n  const initialState = {\n    locale: 'he',\n    languageName: 'Hebrew'\n  };\n  const [locale, setLocale] = React.useState(initialState.locale); // const { query } = useRouter()\n  // store the preference\n\n  useEffect(() => {\n    if (locale === 'he') {\n      const langName = JSON.parse(localStorage.getItem('locale'));\n      setLocale(locale);\n    } else if (locale !== localStorage.getItem('locale')) {\n      localStorage.setItem('locale', JSON.stringify(locale));\n    }\n  }, [locale]); // sync locale value on client-side route changes\n  // React.useEffect(() => {\n  //   if (typeof query.lang === 'string' && isLocale(query.lang) && locale !== query.lang) {\n  //     setLocale(query.lang)\n  //   }\n  // }, [query.lang, locale])\n\n  return __jsx(LocaleContext.Provider, {\n    value: {\n      locale,\n      setLocale\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, children);\n};","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/context/LocaleContext.js"],"names":["React","useState","useEffect","useRef","createContext","LocaleContext","LocaleProvider","lang","children","initialState","locale","languageName","setLocale","langName","JSON","parse","localStorage","getItem","setItem","stringify"],"mappings":";;AAAA,OAAOA,KAAP,IACEC,QADF,EAEEC,SAFF,EAGEC,MAHF,EAIEC,aAJF,QAKO,OALP,C,CAMA;;AAGA,OAAO,MAAMC,aAAa,GAAGL,KAAK,CAACI,aAAN,EAAtB;AAEP,OAAO,MAAME,cAAc,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAwB;AACpD;AACA,QAAMC,YAAY,GAAG;AAAEC,IAAAA,MAAM,EAAE,IAAV;AAAgBC,IAAAA,YAAY,EAAE;AAA9B,GAArB;AAEA,QAAM,CAACD,MAAD,EAASE,SAAT,IAAsBZ,KAAK,CAACC,QAAN,CAAeQ,YAAY,CAACC,MAA5B,CAA5B,CAJoD,CAKpD;AAEA;;AACAR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,MAAM,KAAK,IAAf,EAAqB;AACnB,YAAMG,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAX,CAAjB;AACAL,MAAAA,SAAS,CAACF,MAAD,CAAT;AACD,KAHD,MAGO,IAAIA,MAAM,KAAKM,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAf,EAA+C;AACpDD,MAAAA,YAAY,CAACE,OAAb,CAAqB,QAArB,EAA+BJ,IAAI,CAACK,SAAL,CAAeT,MAAf,CAA/B;AACD;AACF,GAPQ,EAON,CAACA,MAAD,CAPM,CAAT,CARoD,CAiBpD;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAO,MAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAAEA,MAAAA,MAAF;AAAUE,MAAAA;AAAV,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuDJ,QAAvD,CAAP;AACD,CAzBM","sourcesContent":["import React, {\n  useState,\n  useEffect,\n  useRef,\n  createContext\n} from 'react'\n// import { useRouter } from 'next/dist/client/router'\n\n\nexport const LocaleContext = React.createContext()\n\nexport const LocaleProvider = ({ lang, children }) => {\n  // Default Setting\n  const initialState = { locale: 'he', languageName: 'Hebrew' }\n\n  const [locale, setLocale] = React.useState(initialState.locale)\n  // const { query } = useRouter()\n\n  // store the preference\n  useEffect(() => {\n    if (locale === 'he') {\n      const langName = JSON.parse(localStorage.getItem('locale'))\n      setLocale(locale)\n    } else if (locale !== localStorage.getItem('locale')) {\n      localStorage.setItem('locale', JSON.stringify(locale))\n    }\n  }, [locale])\n\n  // sync locale value on client-side route changes\n  // React.useEffect(() => {\n  //   if (typeof query.lang === 'string' && isLocale(query.lang) && locale !== query.lang) {\n  //     setLocale(query.lang)\n  //   }\n  // }, [query.lang, locale])\n\n  return <LocaleContext.Provider value={{ locale, setLocale }}>{children}</LocaleContext.Provider>\n}\n"]},"metadata":{},"sourceType":"module"}