{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nvar isUSA = function isUSA(s) {\n  return s === 'usa' || s === 'Usa' || s === 'United States';\n};\n\nvar isUK = function isUK(str) {\n  return str === 'Uk' || str === 'England' || str === 'United Kingdom' || str == 'great britain';\n};\n\nvar capitalize = function capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.toLowerCase().slice(1);\n};\n\nvar parseCountry = function parseCountry(country) {\n  return isUSA(country) ? 'USA' : isUK(country) ? 'UK' : country;\n};\n\nexport default function useYday(url, country) {\n  var _useState = useState(),\n      yesterdayCn = _useState[0],\n      setStats = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      error = _useState3[0],\n      setError = _useState3[1];\n\n  useEffect(function () {\n    function fetchData() {\n      var URL, _ref, data, _yesterdayCn;\n\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              setError();\n              URL = url + parseCountry(country).toLowerCase();\n              _context.prev = 3;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(axios.get(URL + '?yesterday=true'));\n\n            case 6:\n              _ref = _context.sent;\n              data = _ref.data;\n              _yesterdayCn = {\n                active: data.active,\n                cases: data.cases,\n                todayCases: data.todayCases,\n                recovered: data.recovered,\n                deaths: data.deaths,\n                country: data.country\n              };\n              setStats(_yesterdayCn);\n              setLoading(false);\n              _context.next = 16;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](3);\n              setError(_context.t0);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[3, 13]], Promise);\n    }\n\n    fetchData();\n  }, [country]);\n  return {\n    yesterdayCn: yesterdayCn,\n    loading: loading,\n    error: error\n  };\n}","map":null,"metadata":{},"sourceType":"module"}