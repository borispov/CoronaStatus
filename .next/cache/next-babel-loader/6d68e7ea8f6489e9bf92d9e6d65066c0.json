{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst capitalize = str => str.charAt(0).toUpperCase() + str.toLowerCase().slice(1);\n\nconst parseCn = str => {\n  return str === 'usa' || str === 'Usa' ? 'USA' : str === 'Uk' || str === 'England' || str === 'United Kingdom' || str == 'great britain' ? 'UK' : capitalize(str);\n};\n\nfunction getCountry(list) {\n  return function (queryCountry) {\n    return list.reduce((a, c) => c.country === queryCountry ? c : a, {});\n  };\n}\n\nasync function currentCountry() {\n  return await axios.get('https://extreme-ip-lookup.com/json/').then(res => res.data.country).catch(e => 'israel');\n}\n\nfunction useTodayStats(url, country) {\n  const {\n    0: stats,\n    1: setStats\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState(false);\n  useEffect(() => {\n    async function fetchData() {\n      console.log('fetching data');\n      setLoading(true);\n      setError();\n      let searchCountry = country || (await currentCountry());\n      const parsedCountry = parseCn(searchCountry);\n      const URL = url + searchCountry;\n      const data = await fetch(URL).then(res => res.json()).then(d => getCountry(d)(parsedCountry)).catch(err => setError(err));\n      console.log(data);\n      const relevant = {\n        cases: data.cases,\n        recovered: data.recovered,\n        deaths: data.deaths,\n        country: data.country\n      };\n      setStats(relevant);\n      setLoading(false);\n    }\n\n    fetchData();\n  }, [country]);\n  return {\n    stats,\n    loading,\n    error\n  };\n}\n\nexport default useTodayStats;","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/utils/useTodayStats.js"],"names":["useState","useEffect","axios","capitalize","str","charAt","toUpperCase","toLowerCase","slice","parseCn","getCountry","list","queryCountry","reduce","a","c","country","currentCountry","get","then","res","data","catch","e","useTodayStats","url","stats","setStats","loading","setLoading","error","setError","fetchData","console","log","searchCountry","parsedCountry","URL","fetch","json","d","err","relevant","cases","recovered","deaths"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nconst capitalize = str => str.charAt(0).toUpperCase() + str.toLowerCase().slice(1)\nconst parseCn = str => {\n  return str === 'usa' || str === 'Usa'\n    ? 'USA' \n      : str === 'Uk' || str === 'England' || str === 'United Kingdom' || str == 'great britain'\n    ? 'UK' \n    : capitalize(str)\n}\n\nfunction getCountry(list){\n  return function(queryCountry) {\n    return list.reduce((a,c) => c.country === queryCountry ? c : a, {})\n  }\n}\n\nasync function currentCountry(){\n  return await axios\n    .get('https://extreme-ip-lookup.com/json/')\n    .then(res => res.data.country)\n    .catch(e => 'israel')\n}\n\nfunction useTodayStats(url, country) {\n  const [stats, setStats] = useState();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n\n    async function fetchData() {\n      console.log('fetching data');\n      setLoading(true)\n      setError()\n      let searchCountry = country || await currentCountry();\n\n      const parsedCountry = parseCn(searchCountry);\n      const URL = url + searchCountry\n      const data = await fetch(URL)\n          .then(res => res.json())\n          .then(d => getCountry(d)(parsedCountry))\n          .catch(err => setError(err))\n      console.log(data);\n      const relevant = {\n        cases: data.cases,\n        recovered: data.recovered,\n        deaths: data.deaths,\n        country: data.country\n      }\n      setStats(relevant)\n      setLoading(false)\n    }\n    fetchData();\n  }, [country])\n  return {\n    stats, loading, error\n  }\n}\n\nexport default useTodayStats;\n"]},"metadata":{},"sourceType":"module"}