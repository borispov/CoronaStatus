{"ast":null,"code":"// meant for Line Chart Cases/Deaths Chart\nvar firstWhole = function firstWhole(arr) {\n  var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  if (arr[n] > 0) return n;\n  if (arr[n] == undefined) return 0;\n  n++;\n  return firstWhole(arr, n);\n};\n\nvar parseLabel = function parseLabel(label) {\n  var d = new Date(label);\n  return d.getDate() + '.' + ('0' + (d.getMonth() + 1)).toString();\n};\n\nvar sortForChart = function sortForChart(obj) {\n  var zeroNull = function zeroNull(c) {\n    return c === null ? 0 : c;\n  };\n\n  var sortedObj = obj.sort(function (a, b) {\n    return new Date(a.date) - new Date(b.date);\n  });\n  var initCasesArray = sortedObj.map(function (o) {\n    return o.total_cases;\n  }); // console.log(initCasesArray);\n\n  var firstNumIndex = firstWhole(initCasesArray);\n  var fObj = sortedObj.slice(firstNumIndex);\n  var cases = fObj.map(function (o) {\n    return o.total_cases;\n  });\n  var labels = fObj.map(function (o) {\n    return parseLabel(o.date);\n  });\n  var deaths = fObj.map(function (o) {\n    return zeroNull(o.total_deaths);\n  });\n  var newCases = fObj.map(function (o) {\n    return zeroNull(o.new_cases);\n  });\n  var label = obj[0].location;\n  var datasets = [{\n    label: 'new cases',\n    data: newCases,\n    backgroundColor: '#fc3111',\n    borderColor: '#fc3111',\n    strokeColor: '#301934',\n    pointRadius: 2,\n    borderWidth: 4,\n    fill: true,\n    datalabels: {\n      display: function display(ctx) {\n        return ctx.dataIndex % 2;\n      },\n      align: 'end',\n      anchor: 'end'\n    }\n  }, {\n    label: 'deaths',\n    data: deaths,\n    backgroundColor: 'rgba(29,82,209,1) 100%)',\n    borderColor: 'rgba(21, 21, 21, 1)',\n    strokeColor: \"rgba(222, 222, 34, 1)\",\n    pointRadius: 1,\n    borderWidth: 4,\n    datalabels: {\n      display: function display(ctx) {\n        return ctx.dataIndex % 2;\n      },\n      align: 'end',\n      anchor: 'end'\n    }\n  }, {\n    label: 'cases',\n    data: cases,\n    backgroundColor: 'rgba(145,42,255,0.9)',\n    borderColor: 'rgba(210, 50, 120, 1)',\n    strokeColor: \"rgba(200, 200, 200, 1)\",\n    pointBorderColor: 'rgba(75,10,192,0)',\n    pointBackgroundColor: '#fff',\n    pointHoverBackgroundColor: 'rgba(45, 20, 19, 0)',\n    pointRadius: 0,\n    borderWidth: 5,\n    datalabels: {\n      // display: ctx => !(ctx.dataIndex % 5),\n      display: 'auto',\n      align: 'end',\n      anchor: 'end'\n    }\n  }];\n  return {\n    datasets: datasets,\n    labels: labels,\n    label: label\n  };\n};\n\nexport default sortForChart;","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/utils/sortForChart.js"],"names":["firstWhole","arr","n","undefined","parseLabel","label","d","Date","getDate","getMonth","toString","sortForChart","obj","zeroNull","c","sortedObj","sort","a","b","date","initCasesArray","map","o","total_cases","firstNumIndex","fObj","slice","cases","labels","deaths","total_deaths","newCases","new_cases","location","datasets","data","backgroundColor","borderColor","strokeColor","pointRadius","borderWidth","fill","datalabels","display","ctx","dataIndex","align","anchor","pointBorderColor","pointBackgroundColor","pointHoverBackgroundColor"],"mappings":"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","sourcesContent":["// meant for Line Chart Cases/Deaths Chart\n\nconst firstWhole = (arr, n = 0) => {\n  if (arr[n] > 0) return n\n  if (arr[n] == undefined) return 0\n  n++\n  return firstWhole(arr, n)\n}\n\nconst parseLabel = label => {\n  let d = new Date(label)\n  return d.getDate() + '.' + ('0' + (d.getMonth()+1)).toString()\n}\n\nconst sortForChart = obj => {\n\n  const zeroNull = c => c === null ? 0 : c\n  const sortedObj = obj.sort((a,b) => new Date(a.date) - new Date(b.date))\n\n  const initCasesArray = sortedObj.map(o => o.total_cases)\n  // console.log(initCasesArray);\n  const firstNumIndex = firstWhole(initCasesArray)\n  const fObj = sortedObj.slice(firstNumIndex)\n  const cases = fObj.map(o => o.total_cases)\n  const labels = fObj.map(o => parseLabel(o.date))\n  const deaths = fObj.map(o => zeroNull(o.total_deaths))\n  const newCases = fObj.map(o => zeroNull(o.new_cases))\n  const label = obj[0].location\n\n  const datasets = [\n    {\n      label: 'new cases',\n      data: newCases,\n      backgroundColor: '#fc3111',\n      borderColor: '#fc3111',\n      strokeColor: '#301934',\n      pointRadius: 2,\n      borderWidth: 4,\n      fill: true,\n      datalabels: {\n        display: ctx => ctx.dataIndex % 2,\n        align: 'end',\n        anchor: 'end'\n      }\n    },\n    {\n      label: 'deaths',\n      data: deaths,\n      backgroundColor: 'rgba(29,82,209,1) 100%)',\n      borderColor: 'rgba(21, 21, 21, 1)',\n      strokeColor: \"rgba(222, 222, 34, 1)\",\n      pointRadius: 1,\n      borderWidth: 4,\n      datalabels: {\n        display: ctx => ctx.dataIndex % 2,\n        align: 'end',\n        anchor: 'end'\n      }\n    },\n    {\n      label: 'cases',\n      data: cases,\n      backgroundColor: 'rgba(145,42,255,0.9)',\n      borderColor: 'rgba(210, 50, 120, 1)',\n      strokeColor: \"rgba(200, 200, 200, 1)\",\n      pointBorderColor: 'rgba(75,10,192,0)',\n      pointBackgroundColor: '#fff',\n      pointHoverBackgroundColor: 'rgba(45, 20, 19, 0)',\n      pointRadius: 0,\n      borderWidth: 5,\n      datalabels: {\n        // display: ctx => !(ctx.dataIndex % 5),\n        display: 'auto',\n        align: 'end',\n        anchor: 'end'\n      }\n    }\n  ]\n\n  return {\n    datasets,\n    labels,\n    label\n  }\n}\n\nexport default sortForChart\n"]},"metadata":{},"sourceType":"module"}