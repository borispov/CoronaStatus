{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/raypo/Desktop/Projectos/CoronaStatus/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport App from 'next/app';\nimport Router from 'next/router';\nimport Link from 'next/link';\nimport { useState, useRef } from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport axios from 'axios';\nimport useOutSide from '../utils/useOutSide';\nimport GlobalStyle from './Global';\nimport Header from '../components/Header';\nimport Burger from '../components/Burger';\nimport Menu from '../components/Menu';\nimport { MoonIcon, SunIcon, WorldIcon } from '../components/Icons/ThemeIcon';\nimport { themes } from '../utils/themes';\nimport * as gtag from '../utils/gtag';\n\nfunction currentCountry() {\n  return _regeneratorRuntime.async(function currentCountry$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(axios.get('https://extreme-ip-lookup.com/json/').then(function (res) {\n            return res.data.country;\n          })[\"catch\"](function (e) {\n            return 'israel';\n          }));\n\n        case 2:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nRouter.events.on('routeChangeComplete', function (url) {\n  return gtag.pageview(url);\n});\n\nvar lightTheme = function lightTheme() {\n  return _objectSpread({}, themes['common'], {}, themes['light']);\n};\n\nvar darkTheme = function darkTheme() {\n  return _objectSpread({}, themes['common'], {}, themes['dark']);\n}; // function MyApp ({ Component, pageProps }) {\n//   const [theme, setTheme] = useState(lightTheme())\n//   const [isHeb, setHeb] = useState(true)\n//   const [menuOpen, setOpen] = useState(false)\n//\n//   const closeMenu     = () => setOpen(false)\n//   const toggleMenu    = () => setOpen(!menuOpen)\n//   const toggleLang    = () => {closeMenu(), setHeb(!isHeb)}\n//   const setDarkTheme  = () => {closeMenu(), setTheme(darkTheme())}\n//   const setLightTheme = () => {closeMenu(), setTheme(lightTheme())}\n//\n//   const node          = useRef()\n//   useOutSide(node, closeMenu)\n//\n//   const displayLang   = isHeb ? 'English' : 'עברית'\n//   const isLight       = theme.type === 'light'\n//\n//   return (\n//     <ThemeProvider theme={theme}>\n//\n//       <GlobalStyle isHeb={isHeb}/>\n//       <Header title='nCorona' isHeb={isHeb} >\n//         <div ref={node}>\n//           <Burger setOpen={toggleMenu} open={menuOpen} />\n//           <Menu setOpen={toggleMenu} open={menuOpen} >\n//\n//             <Link href=\"/News\">\n//               <a alt=\"news\" onClick={() => closeMenu()}>\n//                 <span>&#128240;</span>\n//                 { isHeb && 'חדשות' || 'News' }\n//               </a>\n//             </Link>\n//\n//             <Link href=\"/Statistics\">\n//               <a alt=\"stats\" onClick={() => closeMenu()}>\n//                 <span>\t&#128506;</span>\n//                 { isHeb && 'נתונים' || 'Data' }\n//               </a>\n//             </Link>\n//\n//             <Link href=\"/About\">\n//               <a alt=\"about\" onClick={() => closeMenu()}>\n//                 <span>\t&#128506;</span>\n//                 { isHeb && 'אודות' || 'About' }\n//               </a>\n//             </Link>\n//\n//     {#<{(|\n//     // This is Night Mode.. Currently disabled\n//             <a onClick={isLight ?setDarkTheme : setLightTheme}>\n//               <span>{ isLight ? '🌒' : '🌞'}</span>\n//               {\n//                 isLight\n//                 ? (isHeb && 'מצב לילה' || 'Dark Mode')\n//                 : (isHeb && 'מצב יום' || 'Light Mode')\n//               }\n//             </a>\n//     |)}>#}\n//\n//             <a onClick={toggleLang}>\n//               <span>&#127760;</span>\n//               {displayLang}\n//             </a>\n//\n//           </Menu>\n//         </div>\n//\n//       </Header>\n//       <Component {...pageProps} isHeb={isHeb} />\n//     </ThemeProvider>\n//   )\n// }\n// MyApp.getInitialProps = async (AppContext) => {\n//   const appProps = await MyApp.getInitialProps(AppContext)\n//   return {...appProps}\n// }\n// export default MyApp\n\n\nfunction MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n  return __jsx(Component, _extends({}, pageProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }));\n}\n\nMyApp.getInitialProps = function _callee(appContext) {\n  var appProps;\n  return _regeneratorRuntime.async(function _callee$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(App.getInitialProps(appContext));\n\n        case 2:\n          appProps = _context2.sent;\n          return _context2.abrupt(\"return\", _objectSpread({}, appProps));\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default MyApp;","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/pages/_app.js"],"names":["App","Router","Link","useState","useRef","ThemeProvider","axios","useOutSide","GlobalStyle","Header","Burger","Menu","MoonIcon","SunIcon","WorldIcon","themes","gtag","currentCountry","get","then","res","data","country","e","events","on","url","pageview","lightTheme","darkTheme","MyApp","Component","pageProps","getInitialProps","appContext","appProps"],"mappings":";;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,UAAhB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,OAAjC;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,WAAP,MAAwB,UAAxB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,QAAT,EAAmBC,OAAnB,EAA4BC,SAA5B,QAA6C,+BAA7C;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,OAAO,KAAKC,IAAZ,MAAsB,eAAtB;;AAEA,SAAeC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACeX,KAAK,CACfY,GADU,CACN,qCADM,EAEVC,IAFU,CAEL,UAAAC,GAAG;AAAA,mBAAIA,GAAG,CAACC,IAAJ,CAASC,OAAb;AAAA,WAFE,WAGJ,UAAAC,CAAC;AAAA,mBAAI,QAAJ;AAAA,WAHG,CADf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOAtB,MAAM,CAACuB,MAAP,CAAcC,EAAd,CAAiB,qBAAjB,EAAwC,UAAAC,GAAG;AAAA,SAAIV,IAAI,CAACW,QAAL,CAAcD,GAAd,CAAJ;AAAA,CAA3C;;AAEA,IAAME,UAAU,GAAG,SAAbA,UAAa;AAAA,2BACdb,MAAM,CAAC,QAAD,CADQ,MAEdA,MAAM,CAAC,OAAD,CAFQ;AAAA,CAAnB;;AAKA,IAAMc,SAAS,GAAG,SAAZA,SAAY;AAAA,2BACbd,MAAM,CAAC,QAAD,CADO,MAEbA,MAAM,CAAC,MAAD,CAFO;AAAA,CAAlB,C,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;AAGA,SAASe,KAAT,OAAyC;AAAA,MAAxBC,SAAwB,QAAxBA,SAAwB;AAAA,MAAbC,SAAa,QAAbA,SAAa;AACvC,SAAO,MAAC,SAAD,eAAeA,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD;;AAEDF,KAAK,CAACG,eAAN,GAAwB,iBAAOC,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEClC,GAAG,CAACiC,eAAJ,CAAoBC,UAApB,CAFD;;AAAA;AAEhBC,UAAAA,QAFgB;AAAA,8DAIVA,QAJU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAOA,eAAeL,KAAf","sourcesContent":["import App from 'next/app'\nimport Router from 'next/router'\nimport Link from 'next/link';\nimport { useState, useRef } from 'react'\nimport { ThemeProvider } from 'styled-components'\nimport axios from 'axios'\n\nimport useOutSide from '../utils/useOutSide'\nimport GlobalStyle from './Global'\nimport Header from '../components/Header'\nimport Burger from '../components/Burger';\nimport Menu from '../components/Menu';\nimport { MoonIcon, SunIcon, WorldIcon } from '../components/Icons/ThemeIcon'\nimport { themes } from '../utils/themes'\nimport * as gtag from '../utils/gtag'\n\nasync function currentCountry(){\n  return await axios\n    .get('https://extreme-ip-lookup.com/json/')\n    .then(res => res.data.country)\n    .catch(e => 'israel')\n}\n\nRouter.events.on('routeChangeComplete', url => gtag.pageview(url))\n\nconst lightTheme = () => ({\n  ...themes['common'],\n  ...themes['light'],\n})\n\nconst darkTheme = () => ({\n  ...themes['common'],\n  ...themes['dark'],\n})\n\n\n// function MyApp ({ Component, pageProps }) {\n//   const [theme, setTheme] = useState(lightTheme())\n//   const [isHeb, setHeb] = useState(true)\n//   const [menuOpen, setOpen] = useState(false)\n//\n//   const closeMenu     = () => setOpen(false)\n//   const toggleMenu    = () => setOpen(!menuOpen)\n//   const toggleLang    = () => {closeMenu(), setHeb(!isHeb)}\n//   const setDarkTheme  = () => {closeMenu(), setTheme(darkTheme())}\n//   const setLightTheme = () => {closeMenu(), setTheme(lightTheme())}\n//\n//   const node          = useRef()\n//   useOutSide(node, closeMenu)\n//\n//   const displayLang   = isHeb ? 'English' : 'עברית'\n//   const isLight       = theme.type === 'light'\n//\n//   return (\n//     <ThemeProvider theme={theme}>\n//\n//       <GlobalStyle isHeb={isHeb}/>\n//       <Header title='nCorona' isHeb={isHeb} >\n//         <div ref={node}>\n//           <Burger setOpen={toggleMenu} open={menuOpen} />\n//           <Menu setOpen={toggleMenu} open={menuOpen} >\n//\n//             <Link href=\"/News\">\n//               <a alt=\"news\" onClick={() => closeMenu()}>\n//                 <span>&#128240;</span>\n//                 { isHeb && 'חדשות' || 'News' }\n//               </a>\n//             </Link>\n//\n//             <Link href=\"/Statistics\">\n//               <a alt=\"stats\" onClick={() => closeMenu()}>\n//                 <span>\t&#128506;</span>\n//                 { isHeb && 'נתונים' || 'Data' }\n//               </a>\n//             </Link>\n//\n//             <Link href=\"/About\">\n//               <a alt=\"about\" onClick={() => closeMenu()}>\n//                 <span>\t&#128506;</span>\n//                 { isHeb && 'אודות' || 'About' }\n//               </a>\n//             </Link>\n//\n//     {#<{(|\n//     // This is Night Mode.. Currently disabled\n//             <a onClick={isLight ?setDarkTheme : setLightTheme}>\n//               <span>{ isLight ? '🌒' : '🌞'}</span>\n//               {\n//                 isLight\n//                 ? (isHeb && 'מצב לילה' || 'Dark Mode')\n//                 : (isHeb && 'מצב יום' || 'Light Mode')\n//               }\n//             </a>\n//     |)}>#}\n//\n//             <a onClick={toggleLang}>\n//               <span>&#127760;</span>\n//               {displayLang}\n//             </a>\n//\n//           </Menu>\n//         </div>\n//\n//       </Header>\n//       <Component {...pageProps} isHeb={isHeb} />\n//     </ThemeProvider>\n//   )\n// }\n\n// MyApp.getInitialProps = async (AppContext) => {\n//   const appProps = await MyApp.getInitialProps(AppContext)\n//   return {...appProps}\n// }\n\n// export default MyApp\n\n\nfunction MyApp({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}\n\nMyApp.getInitialProps = async (appContext) => {\n  // calls page's `getInitialProps` and fills `appProps.pageProps`\n  const appProps = await App.getInitialProps(appContext);\n\n  return { ...appProps }\n}\n\nexport default MyApp\n"]},"metadata":{},"sourceType":"module"}