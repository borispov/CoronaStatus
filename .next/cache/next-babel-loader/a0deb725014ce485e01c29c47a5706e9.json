{"ast":null,"code":"var _jsxFileName = \"/Users/raypo/Desktop/Projectos/CoronaStatus/context/LocaleContext.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useRef, createContext } from 'react';\nexport var LocaleContext = createContext();\nimport { getInitialLocale } from '../locales/getInitialLocale';\nexport var LocaleProvider = function LocaleProvider(props) {\n  // Default Setting\n  var initialState = window && getInitialLocale();\n\n  var _useState = useState(initialState),\n      locale = _useState[0],\n      setLocale = _useState[1];\n\n  var prev = useRef();\n  useEffect(function () {\n    var preChanges = localStorage.getItem(\"locale\");\n    console.log('pre changes::::::', preChanges);\n    localStorage.setItem(\"locale\", locale);\n    setLocale(locale); // if (prev.current === locale || locale === 'he' ) {\n    //   const langName = localStorage.getItem('locale')\n    //   if (langName) {\n    //     prev.current = langName\n    //     setLocale(locale)\n    //   } else {\n    //     localStorage.setItem(\"locale\", locale)\n    //     prev.current = langName\n    //   }\n    // } else if (prev.current !== locale) {\n    //   console.log('writing {LOCALE} to storage');\n    //   localStorage.setItem('locale', locale)\n    //   prev.current = locale\n    // }\n  }, [locale]);\n  return __jsx(LocaleContext.Provider, {\n    value: {\n      locale: locale,\n      setLocale: setLocale\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, props.children);\n};","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/context/LocaleContext.js"],"names":["useState","useEffect","useRef","createContext","LocaleContext","getInitialLocale","LocaleProvider","props","initialState","window","locale","setLocale","prev","preChanges","localStorage","getItem","console","log","setItem","children"],"mappings":";;;AAAA,SACEA,QADF,EAEEC,SAFF,EAGEC,MAHF,EAIEC,aAJF,QAKO,OALP;AAOA,OAAO,IAAMC,aAAa,GAAGD,aAAa,EAAnC;AAEP,SAASE,gBAAT,QAAiC,6BAAjC;AAEA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAW;AACvC;AACA,MAAMC,YAAY,GAAGC,MAAM,IAAIJ,gBAAgB,EAA/C;;AAFuC,kBAITL,QAAQ,CAACQ,YAAD,CAJC;AAAA,MAI/BE,MAJ+B;AAAA,MAIvBC,SAJuB;;AAKvC,MAAMC,IAAI,GAAGV,MAAM,EAAnB;AAEAD,EAAAA,SAAS,CAAC,YAAM;AAEd,QAAMY,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCJ,UAAjC;AACAC,IAAAA,YAAY,CAACI,OAAb,CAAqB,QAArB,EAA+BR,MAA/B;AACAC,IAAAA,SAAS,CAACD,MAAD,CAAT,CALc,CAOd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GArBQ,EAqBN,CAACA,MAAD,CArBM,CAAT;AAuBA,SACE,MAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAAEA,MAAAA,MAAM,EAANA,MAAF;AAAUC,MAAAA,SAAS,EAATA;AAAV,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,KAAK,CAACY,QADT,CADF;AAKD,CAnCM","sourcesContent":["import {\n  useState,\n  useEffect,\n  useRef,\n  createContext\n} from 'react'\n\nexport const LocaleContext = createContext()\n\nimport { getInitialLocale } from '../locales/getInitialLocale'\n\nexport const LocaleProvider = (props) => {\n  // Default Setting\n  const initialState = window && getInitialLocale()\n\n  const [ locale, setLocale ] = useState(initialState)\n  const prev = useRef()\n\n  useEffect(() => {\n\n    const preChanges = localStorage.getItem(\"locale\")\n    console.log('pre changes::::::', preChanges);\n    localStorage.setItem(\"locale\", locale)\n    setLocale(locale)\n\n    // if (prev.current === locale || locale === 'he' ) {\n    //   const langName = localStorage.getItem('locale')\n    //   if (langName) {\n    //     prev.current = langName\n    //     setLocale(locale)\n    //   } else {\n    //     localStorage.setItem(\"locale\", locale)\n    //     prev.current = langName\n    //   }\n    // } else if (prev.current !== locale) {\n    //   console.log('writing {LOCALE} to storage');\n    //   localStorage.setItem('locale', locale)\n    //   prev.current = locale\n    // }\n  }, [locale])\n\n  return (\n    <LocaleContext.Provider value={{ locale, setLocale }} >\n      {props.children}\n    </LocaleContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}