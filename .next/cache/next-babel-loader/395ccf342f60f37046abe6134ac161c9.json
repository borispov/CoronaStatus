{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport sortForChart from './sortForChart';\nvar baseURL = \"http://46.101.156.51:3003/api/v1/alltime/\";\n\nfunction currentCountry() {\n  return _regeneratorRuntime.async(function currentCountry$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(axios.get('https://extreme-ip-lookup.com/json/').then(function (res) {\n            return res.data.country;\n          })[\"catch\"](function (e) {\n            return 'israel';\n          }));\n\n        case 2:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction useTime(loc) {\n  var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : baseURL;\n\n  var _useState = useState(),\n      timeStats = _useState[0],\n      setData = _useState[1];\n\n  var _useState2 = useState(),\n      countryStats = _useState2[0],\n      setCountryStats = _useState2[1];\n\n  var _useState3 = useState(false),\n      timeLoading = _useState3[0],\n      setLoading = _useState3[1];\n\n  var _useState4 = useState(false),\n      timeError = _useState4[0],\n      setError = _useState4[1];\n\n  var _useState5 = useState(loc),\n      country = _useState5[0],\n      setCountry = _useState5[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var geoLocation;\n      return _regeneratorRuntime.async(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(currentCountry());\n\n            case 2:\n              geoLocation = _context2.sent;\n              setCountry(geoLocation);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  function fetchData(cn) {\n    var isWorld, URL, data, timeStats;\n    return _regeneratorRuntime.async(function fetchData$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!(typeof cn !== 'string')) {\n              _context3.next = 2;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 2:\n            setLoading(true);\n            setError();\n            isWorld = cn === 'world';\n            URL = cn === 'world' ? baseURL : baseURL + country;\n            _context3.next = 8;\n            return _regeneratorRuntime.awrap(axios.get(URL).then(function (res) {\n              return res.data;\n            })[\"catch\"](function (err) {\n              return setError(err);\n            }));\n\n          case 8:\n            data = _context3.sent;\n            timeStats = sortForChart(data);\n            isWorld ? setData(timeStats) : setCountryStats(timeStats);\n            setLoading(false);\n\n          case 12:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  useEffect(function () {\n    fetchData('world');\n  }, []);\n  useEffect(function () {\n    country.length && fetchData(country);\n  }, [country]);\n\n  if (timeLoading || timeError) {\n    console.log('returning loading or error');\n    return {\n      timeLoading: timeLoading,\n      timeError: timeError\n    };\n  }\n\n  if (countryStats && timeStats) {\n    console.log('returning DATA');\n    console.log(countryStats);\n    return {\n      countryStats: countryStats,\n      timeStats: timeStats,\n      timeLoading: timeLoading,\n      timeError: timeError\n    };\n  } // return {\n  //   countryStats, timeStats, timeLoading, timeError\n  // }\n\n}\n\nexport default useTime;","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/utils/useTime.js"],"names":["useState","useEffect","axios","sortForChart","baseURL","currentCountry","get","then","res","data","country","e","useTime","loc","url","timeStats","setData","countryStats","setCountryStats","timeLoading","setLoading","timeError","setError","setCountry","geoLocation","fetchData","cn","isWorld","URL","err","length","console","log"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,IAAMC,OAAO,8CAAb;;AAEA,SAAeC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACeH,KAAK,CACfI,GADU,CACN,qCADM,EAEVC,IAFU,CAEL,UAAAC,GAAG;AAAA,mBAAIA,GAAG,CAACC,IAAJ,CAASC,OAAb;AAAA,WAFE,WAGJ,UAAAC,CAAC;AAAA,mBAAI,QAAJ;AAAA,WAHG,CADf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,SAASC,OAAT,CAAiBC,GAAjB,EAAqC;AAAA,MAAfC,GAAe,uEAATV,OAAS;;AAAA,kBACNJ,QAAQ,EADF;AAAA,MAC5Be,SAD4B;AAAA,MACjBC,OADiB;;AAAA,mBAEKhB,QAAQ,EAFb;AAAA,MAE5BiB,YAF4B;AAAA,MAEdC,eAFc;;AAAA,mBAGDlB,QAAQ,CAAC,KAAD,CAHP;AAAA,MAG5BmB,WAH4B;AAAA,MAGfC,UAHe;;AAAA,mBAILpB,QAAQ,CAAC,KAAD,CAJH;AAAA,MAI5BqB,SAJ4B;AAAA,MAIjBC,QAJiB;;AAAA,mBAKLtB,QAAQ,CAACa,GAAD,CALH;AAAA,MAK5BH,OAL4B;AAAA,MAKnBa,UALmB;;AAOnCtB,EAAAA,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACyBI,cAAc,EADvC;;AAAA;AACKmB,cAAAA,WADL;AAECD,cAAAA,UAAU,CAACC,WAAD,CAAV;;AAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAID,GALQ,EAKN,EALM,CAAT;;AAOA,WAAeC,SAAf,CAAyBC,EAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACM,OAAOA,EAAP,KAAc,QADpB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAEEN,YAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,YAAAA,QAAQ;AAEFK,YAAAA,OALR,GAKkBD,EAAE,KAAK,OALzB;AAMQE,YAAAA,GANR,GAMeF,EAAE,KAAK,OAAP,GAAiBtB,OAAjB,GAA2BA,OAAO,GAAGM,OANpD;AAAA;AAAA,6CAOqBR,KAAK,CAACI,GAAN,CAAUsB,GAAV,EAChBrB,IADgB,CACX,UAAAC,GAAG;AAAA,qBAAIA,GAAG,CAACC,IAAR;AAAA,aADQ,WAEV,UAAAoB,GAAG;AAAA,qBAAIP,QAAQ,CAACO,GAAD,CAAZ;AAAA,aAFO,CAPrB;;AAAA;AAOQpB,YAAAA,IAPR;AAUQM,YAAAA,SAVR,GAUoBZ,YAAY,CAACM,IAAD,CAVhC;AAWEkB,YAAAA,OAAO,GAAGX,OAAO,CAACD,SAAD,CAAV,GAAwBG,eAAe,CAACH,SAAD,CAA9C;AACAK,YAAAA,UAAU,CAAC,KAAD,CAAV;;AAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeAnB,EAAAA,SAAS,CAAC,YAAM;AACdwB,IAAAA,SAAS,CAAC,OAAD,CAAT;AACD,GAFQ,EAEN,EAFM,CAAT;AAIAxB,EAAAA,SAAS,CAAC,YAAM;AACdS,IAAAA,OAAO,CAACoB,MAAR,IAAkBL,SAAS,CAACf,OAAD,CAA3B;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;;AAIA,MAAIS,WAAW,IAAIE,SAAnB,EAA8B;AAC5BU,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACA,WAAO;AAACb,MAAAA,WAAW,EAAXA,WAAD;AAAcE,MAAAA,SAAS,EAATA;AAAd,KAAP;AACD;;AAED,MAAIJ,YAAY,IAAIF,SAApB,EAA+B;AAC7BgB,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYf,YAAZ;AACA,WAAO;AAAEA,MAAAA,YAAY,EAAZA,YAAF;AAAgBF,MAAAA,SAAS,EAATA,SAAhB;AAA2BI,MAAAA,WAAW,EAAXA,WAA3B;AAAwCE,MAAAA,SAAS,EAATA;AAAxC,KAAP;AACD,GA9CkC,CAgDnC;AACA;AACA;;AACD;;AAED,eAAeT,OAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport sortForChart from './sortForChart'\n\nconst baseURL = `http://46.101.156.51:3003/api/v1/alltime/`\n\nasync function currentCountry(){\n  return await axios\n    .get('https://extreme-ip-lookup.com/json/')\n    .then(res => res.data.country)\n    .catch(e => 'israel')\n}\n\nfunction useTime(loc, url = baseURL) {\n  const [timeStats, setData] = useState();\n  const [countryStats, setCountryStats] = useState();\n  const [timeLoading, setLoading] = useState(false);\n  const [timeError, setError] = useState(false);\n  const [country, setCountry] = useState(loc)\n\n  useEffect(() => {\n    (async () => {\n      let geoLocation = await currentCountry()\n      setCountry(geoLocation)\n    })()\n  }, [])\n\n  async function fetchData(cn) {\n    if (typeof cn !== 'string') {return}\n    setLoading(true)\n    setError()\n\n    const isWorld = cn === 'world'\n    const URL =  cn === 'world' ? baseURL : baseURL + country\n    const data = await axios.get(URL)\n      .then(res => res.data)\n      .catch(err => setError(err))\n    const timeStats = sortForChart(data);\n    isWorld ? setData(timeStats) : setCountryStats(timeStats)\n    setLoading(false)\n  }\n\n  useEffect(() => {\n    fetchData('world')\n  }, [])\n\n  useEffect(() => {\n    country.length && fetchData(country);\n  }, [country])\n\n  if (timeLoading || timeError) {\n    console.log('returning loading or error');\n    return {timeLoading, timeError}\n  }\n\n  if (countryStats && timeStats) {\n    console.log('returning DATA');\n    console.log(countryStats);\n    return { countryStats, timeStats, timeLoading, timeError }\n  }\n\n  // return {\n  //   countryStats, timeStats, timeLoading, timeError\n  // }\n}\n\nexport default useTime;\n"]},"metadata":{},"sourceType":"module"}