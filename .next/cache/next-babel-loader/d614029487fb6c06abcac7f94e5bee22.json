{"ast":null,"code":"var _jsxFileName = \"/Users/raypo/Desktop/Projectos/CoronaStatus/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nimport Head from 'next/head';\nimport { useEffect, useContext } from 'react';\nimport CoronaApp from '../components/CoronaApp';\nimport InfoSection from '../components/InfoSection';\nimport Footer from '../components/Footer';\nimport { FadeIn } from '../components/S';\nimport useWorldData from '../hooks/useWorldData';\nimport { ProxyContext } from '../context/proxy-context';\nimport { LocaleContext } from '../context/LocaleContext';\nimport { getInitialLocale } from '../locales/getInitialLocale';\n\nconst getCountryFromData = response => response.data.country;\n\nconst currentCountry = async url => await axios.get(url).then(getCountryFromData).catch(e => 'israel');\n\nfunction IndexPage(worldTime, yesterdayGlobal, newProxy) {\n  const {\n    0: proxy\n  } = useContext(ProxyContext);\n  useEffect(() => {\n    let ignore = false;\n\n    if (newProxy && !ignore) {\n      setProxy(newProxy);\n    }\n\n    return () => {\n      ignore: true;\n    };\n  }, [newProxy]);\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, __jsx(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"nCorona - Novel Coronavirus Statistics & Resources for Coping\")), __jsx(FadeIn, {\n    delay: \"0.5s\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, __jsx(CoronaApp, {\n    userLocation: proxy.countryName,\n    worldTime: worldTime,\n    yesterdayGlobal: yesterdayGlobal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), __jsx(InfoSection, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  })));\n}\n\nIndexPage.getInitialProps = async ({\n  req\n}) => {\n  const worldTime = await useWorldData();\n  const globalData = await axios.get('https://corona.lmao.ninja/v2/all?yesterday=true');\n  const yesterdayGlobal = {\n    active: globalData.data.active,\n    critical: globalData.data.critical,\n    cases: globalData.data.cases,\n    todayCases: globalData.data.todayCases,\n    recovered: globalData.data.recovered,\n    deaths: globalData.data.deaths,\n    country: globalData.data.country,\n    affectedCountries: globalData.data.affectedCountries\n  };\n\n  if (req) {\n    const ipAddress = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\n    const localAddresses = ['::1', '127.0.0.1', 'localhost']; // Construct URL with IP ADDRESS\n\n    const proxyUrl = !localAddresses.includes(ipAddress) && `https://extreme-ip-lookup.com/json/${ipAddress}` || null;\n\n    try {\n      const countryName = await currentCountry('');\n      const newProxy = {\n        countryName,\n        ipAddress\n      };\n      console.log('WE ARE HERE');\n      console.log('----------------');\n      console.log(yesterdayGlobal);\n      console.log('----------------');\n      return _objectSpread({\n        newProxy\n      }, worldTime, {}, yesterdayGlobal);\n    } catch (e) {\n      return {\n        errorCode: e.code,\n        errorMessage: e.message,\n        yesterdayGlobal,\n        worldTime\n      };\n    }\n  }\n\n  return _objectSpread({}, yesterdayGlobal, {}, worldTime, {\n    newProxy: null\n  });\n};\n\nexport default IndexPage;","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/pages/index.js"],"names":["axios","Head","useEffect","useContext","CoronaApp","InfoSection","Footer","FadeIn","useWorldData","ProxyContext","LocaleContext","getInitialLocale","getCountryFromData","response","data","country","currentCountry","url","get","then","catch","e","IndexPage","worldTime","yesterdayGlobal","newProxy","proxy","ignore","setProxy","countryName","getInitialProps","req","globalData","active","critical","cases","todayCases","recovered","deaths","affectedCountries","ipAddress","headers","connection","remoteAddress","localAddresses","proxyUrl","includes","console","log","errorCode","code","errorMessage","message"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport Head from 'next/head'\nimport { useEffect, useContext } from 'react'\n\nimport CoronaApp from '../components/CoronaApp'\nimport InfoSection from '../components/InfoSection'\nimport Footer from '../components/Footer'\nimport { FadeIn } from '../components/S'\nimport useWorldData from '../hooks/useWorldData'\n\nimport { ProxyContext } from '../context/proxy-context'\nimport { LocaleContext } from '../context/LocaleContext'\nimport { getInitialLocale } from '../locales/getInitialLocale'\n\nconst getCountryFromData = response => response.data.country\nconst currentCountry = async (url) => await axios.get(url).then(getCountryFromData).catch(e => 'israel')\n\nfunction IndexPage( worldTime, yesterdayGlobal, newProxy) {\n\n  const [proxy]  = useContext(ProxyContext)\n\n  useEffect(() => {\n    let ignore = false\n    if (newProxy && !ignore) {\n      setProxy(newProxy)\n    }\n    return () => { ignore: true }\n  }, [newProxy])\n\n  return (\n    <>\n      <Head>\n        <title>nCorona - Novel Coronavirus Statistics & Resources for Coping</title>\n      </Head>\n      <FadeIn delay=\"0.5s\">\n       <CoronaApp userLocation={proxy.countryName} worldTime={worldTime} yesterdayGlobal={yesterdayGlobal} />\n        <InfoSection />\n      </FadeIn>\n    </>\n  )\n}\n\nIndexPage.getInitialProps = async ({ req }) => {\n\n  const worldTime = await useWorldData()\n  const globalData = await axios.get('https://corona.lmao.ninja/v2/all?yesterday=true')\n  const yesterdayGlobal = {\n    active: globalData.data.active,\n    critical: globalData.data.critical,\n    cases: globalData.data.cases,\n    todayCases: globalData.data.todayCases,\n    recovered: globalData.data.recovered,\n    deaths: globalData.data.deaths,\n    country: globalData.data.country,\n    affectedCountries: globalData.data.affectedCountries\n  }\n\n  if (req) {\n      const ipAddress = req.headers['x-forwarded-for'] || req.connection.remoteAddress\n      const localAddresses = ['::1', '127.0.0.1', 'localhost']\n      // Construct URL with IP ADDRESS\n      const proxyUrl = !localAddresses.includes(ipAddress) && `https://extreme-ip-lookup.com/json/${ipAddress}` || null\n\n    try {\n      const countryName = await currentCountry('')\n      const newProxy = { countryName, ipAddress }\n      console.log('WE ARE HERE');\n      console.log('----------------');\n      console.log(yesterdayGlobal);\n      console.log('----------------');\n      return { newProxy,  ...worldTime, ...yesterdayGlobal }\n    } catch(e) {\n      return { errorCode: e.code, errorMessage: e.message, yesterdayGlobal, worldTime }\n    }\n  }\n\n\n  return {...yesterdayGlobal, ...worldTime, newProxy: null}\n}\n\nexport default IndexPage\n"]},"metadata":{},"sourceType":"module"}