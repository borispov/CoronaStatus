{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// meant for Line Chart Cases/Deaths Chart\nconst sortForChart = obj => {\n  const zeroNull = c => c === null ? 0 : c;\n\n  const sortedObj = obj.map(e => {\n    return _objectSpread({\n      date: new Date(e.date)\n    }, e);\n  }).sort((a, b) => a - b);\n  console.log(sortedObj);\n  const labels = obj.map(o => o.date);\n  const deaths = obj.map(o => zeroNull(o.total_deaths));\n  const cases = obj.map(o => zeroNull(o.total_cases));\n  const newCases = obj.map(o => zeroNull(o.new_cases));\n  const label = obj[0].location;\n  const datasets = [{\n    label: 'new cases',\n    data: newCases,\n    backgroundColor: '#fc3111',\n    borderColor: '#fc3111',\n    strokeColor: '#301934',\n    pointRadius: 2,\n    borderWidth: 2\n  }, {\n    label: 'deaths',\n    data: deaths,\n    backgroundColor: 'rgba(29,82,209,1) 100%)',\n    borderColor: 'rgba(21, 21, 21, 1)',\n    strokeColor: \"rgba(222, 222, 34, 1)\",\n    pointRadius: 3,\n    borderWidth: 3\n  }, {\n    label: 'cases',\n    data: cases,\n    backgroundColor: 'rgba(208,42,144,1)',\n    borderColor: 'rgba(186, 50, 213, 1)',\n    strokeColor: \"rgba(200, 200, 200, 1)\",\n    pointRadius: 2,\n    borderWidth: 2\n  }];\n  return {\n    datasets,\n    labels,\n    label\n  };\n};\n\nexport default sortForChart;","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/utils/sortForChart.js"],"names":["sortForChart","obj","zeroNull","c","sortedObj","map","e","date","Date","sort","a","b","console","log","labels","o","deaths","total_deaths","cases","total_cases","newCases","new_cases","label","location","datasets","data","backgroundColor","borderColor","strokeColor","pointRadius","borderWidth"],"mappings":";;;;;;AAAA;AAEA,MAAMA,YAAY,GAAGC,GAAG,IAAI;AAE1B,QAAMC,QAAQ,GAAGC,CAAC,IAAIA,CAAC,KAAK,IAAN,GAAa,CAAb,GAAiBA,CAAvC;;AAEA,QAAMC,SAAS,GAAGH,GAAG,CAACI,GAAJ,CAAQC,CAAC,IAAI;AAC7B;AACEC,MAAAA,IAAI,EAAE,IAAIC,IAAJ,CAASF,CAAC,CAACC,IAAX;AADR,OAEKD,CAFL;AAID,GALiB,EAKfG,IALe,CAKV,CAACC,CAAD,EAAGC,CAAH,KAASD,CAAC,GAACC,CALD,CAAlB;AAQAC,EAAAA,OAAO,CAACC,GAAR,CAAYT,SAAZ;AAEA,QAAMU,MAAM,GAAGb,GAAG,CAACI,GAAJ,CAAQU,CAAC,IAAIA,CAAC,CAACR,IAAf,CAAf;AACA,QAAMS,MAAM,GAAGf,GAAG,CAACI,GAAJ,CAAQU,CAAC,IAAIb,QAAQ,CAACa,CAAC,CAACE,YAAH,CAArB,CAAf;AACA,QAAMC,KAAK,GAAGjB,GAAG,CAACI,GAAJ,CAAQU,CAAC,IAAIb,QAAQ,CAACa,CAAC,CAACI,WAAH,CAArB,CAAd;AACA,QAAMC,QAAQ,GAAGnB,GAAG,CAACI,GAAJ,CAAQU,CAAC,IAAIb,QAAQ,CAACa,CAAC,CAACM,SAAH,CAArB,CAAjB;AACA,QAAMC,KAAK,GAAGrB,GAAG,CAAC,CAAD,CAAH,CAAOsB,QAArB;AAGA,QAAMC,QAAQ,GAAG,CACf;AACEF,IAAAA,KAAK,EAAE,WADT;AAEEG,IAAAA,IAAI,EAAEL,QAFR;AAGEM,IAAAA,eAAe,EAAE,SAHnB;AAIEC,IAAAA,WAAW,EAAE,SAJf;AAKEC,IAAAA,WAAW,EAAE,SALf;AAMEC,IAAAA,WAAW,EAAE,CANf;AAOEC,IAAAA,WAAW,EAAE;AAPf,GADe,EAUf;AACER,IAAAA,KAAK,EAAE,QADT;AAEEG,IAAAA,IAAI,EAAET,MAFR;AAGEU,IAAAA,eAAe,EAAE,yBAHnB;AAIEC,IAAAA,WAAW,EAAE,qBAJf;AAKEC,IAAAA,WAAW,EAAE,uBALf;AAMEC,IAAAA,WAAW,EAAE,CANf;AAOEC,IAAAA,WAAW,EAAE;AAPf,GAVe,EAmBf;AACER,IAAAA,KAAK,EAAE,OADT;AAEEG,IAAAA,IAAI,EAAEP,KAFR;AAGEQ,IAAAA,eAAe,EAAE,oBAHnB;AAIEC,IAAAA,WAAW,EAAE,uBAJf;AAKEC,IAAAA,WAAW,EAAE,wBALf;AAMEC,IAAAA,WAAW,EAAE,CANf;AAOEC,IAAAA,WAAW,EAAE;AAPf,GAnBe,CAAjB;AA8BA,SAAO;AACLN,IAAAA,QADK;AAELV,IAAAA,MAFK;AAGLQ,IAAAA;AAHK,GAAP;AAKD,CAxDD;;AA0DA,eAAetB,YAAf","sourcesContent":["// meant for Line Chart Cases/Deaths Chart\n\nconst sortForChart = obj => {\n\n  const zeroNull = c => c === null ? 0 : c\n\n  const sortedObj = obj.map(e => {\n    return {\n      date: new Date(e.date),\n      ...e\n    }\n  }).sort((a,b) => a-b)\n\n\n  console.log(sortedObj);\n\n  const labels = obj.map(o => o.date)\n  const deaths = obj.map(o => zeroNull(o.total_deaths))\n  const cases = obj.map(o => zeroNull(o.total_cases))\n  const newCases = obj.map(o => zeroNull(o.new_cases))\n  const label = obj[0].location\n\n\n  const datasets = [\n    {\n      label: 'new cases',\n      data: newCases,\n      backgroundColor: '#fc3111',\n      borderColor: '#fc3111',\n      strokeColor: '#301934',\n      pointRadius: 2,\n      borderWidth: 2\n    },\n    {\n      label: 'deaths',\n      data: deaths,\n      backgroundColor: 'rgba(29,82,209,1) 100%)',\n      borderColor: 'rgba(21, 21, 21, 1)',\n      strokeColor: \"rgba(222, 222, 34, 1)\",\n      pointRadius: 3,\n      borderWidth: 3\n    },\n    {\n      label: 'cases',\n      data: cases,\n      backgroundColor: 'rgba(208,42,144,1)',\n      borderColor: 'rgba(186, 50, 213, 1)',\n      strokeColor: \"rgba(200, 200, 200, 1)\",\n      pointRadius: 2,\n      borderWidth: 2\n    }\n  ]\n\n  return {\n    datasets,\n    labels,\n    label\n  }\n}\n\nexport default sortForChart\n"]},"metadata":{},"sourceType":"module"}