{"ast":null,"code":"var _jsxFileName = \"/Users/raypo/Desktop/Projectos/CoronaStatus/context/LocaleContext.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useRef, createContext } from 'react';\nexport const LocaleContext = createContext();\nexport const LocaleProvider = props => {\n  // Default Setting\n  const initialState = 'he';\n  const {\n    0: locale,\n    1: setLocale\n  } = useState(initialState);\n  const prev = useRef();\n  useEffect(() => {\n    console.log('from context: ', locale);\n\n    if (locale === 'he' || prev.current === 'locale') {\n      const langName = JSON.parse(localStorage.getItem('locale'));\n\n      if (langName) {\n        prev.current = langName;\n        setLocale(locale);\n      } else {\n        localStorage.setItem(\"locale\", JSON.stringify(locale));\n      }\n    } else if (prev.current !== locale) {\n      console.log('writing {LOCALE} to storage');\n      localStorage.setItem('locale', JSON.stringify(locale));\n    }\n  }, [locale]);\n  return __jsx(LocaleContext.Provider, {\n    value: {\n      locale,\n      setLocale\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, props.children);\n};","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/context/LocaleContext.js"],"names":["useState","useEffect","useRef","createContext","LocaleContext","LocaleProvider","props","initialState","locale","setLocale","prev","console","log","current","langName","JSON","parse","localStorage","getItem","setItem","stringify","children"],"mappings":";;;AAAA,SACEA,QADF,EAEEC,SAFF,EAGEC,MAHF,EAIEC,aAJF,QAKO,OALP;AAOA,OAAO,MAAMC,aAAa,GAAGD,aAAa,EAAnC;AAEP,OAAO,MAAME,cAAc,GAAIC,KAAD,IAAW;AACvC;AACA,QAAMC,YAAY,GAAG,IAArB;AAEA,QAAM;AAAA,OAAEC,MAAF;AAAA,OAAUC;AAAV,MAAwBT,QAAQ,CAACO,YAAD,CAAtC;AACA,QAAMG,IAAI,GAAGR,MAAM,EAAnB;AAGAD,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BJ,MAA9B;;AACA,QAAIA,MAAM,KAAK,IAAX,IAAmBE,IAAI,CAACG,OAAL,KAAiB,QAAxC,EAAkD;AAChD,YAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAX,CAAjB;;AACA,UAAIJ,QAAJ,EAAc;AACZJ,QAAAA,IAAI,CAACG,OAAL,GAAeC,QAAf;AACAL,QAAAA,SAAS,CAACD,MAAD,CAAT;AACD,OAHD,MAGO;AACLS,QAAAA,YAAY,CAACE,OAAb,CAAqB,QAArB,EAA+BJ,IAAI,CAACK,SAAL,CAAeZ,MAAf,CAA/B;AACD;AACF,KARD,MAQO,IAAIE,IAAI,CAACG,OAAL,KAAiBL,MAArB,EAA6B;AAClCG,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACAK,MAAAA,YAAY,CAACE,OAAb,CAAqB,QAArB,EAA+BJ,IAAI,CAACK,SAAL,CAAeZ,MAAf,CAA/B;AACD;AACF,GAdQ,EAcN,CAACA,MAAD,CAdM,CAAT;AAgBA,SACE,MAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAAEA,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,KAAK,CAACe,QADT,CADF;AAKD,CA7BM","sourcesContent":["import {\n  useState,\n  useEffect,\n  useRef,\n  createContext\n} from 'react'\n\nexport const LocaleContext = createContext()\n\nexport const LocaleProvider = (props) => {\n  // Default Setting\n  const initialState = 'he'\n\n  const [ locale, setLocale ] = useState(initialState)\n  const prev = useRef()\n\n\n  useEffect(() => {\n    console.log('from context: ', locale);\n    if (locale === 'he' || prev.current === 'locale') {\n      const langName = JSON.parse(localStorage.getItem('locale'))\n      if (langName) {\n        prev.current = langName\n        setLocale(locale)\n      } else {\n        localStorage.setItem(\"locale\", JSON.stringify(locale))\n      }\n    } else if (prev.current !== locale) {\n      console.log('writing {LOCALE} to storage');\n      localStorage.setItem('locale', JSON.stringify(locale))\n    }\n  }, [locale])\n\n  return (\n    <LocaleContext.Provider value={{ locale, setLocale }} >\n      {props.children}\n    </LocaleContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}