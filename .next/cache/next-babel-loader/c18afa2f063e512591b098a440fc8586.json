{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction getCountry(list) {\n  return function (queryCountry) {\n    return list.reduce(function (a, c) {\n      return c.country === queryCountry ? c : a;\n    }, {});\n  };\n}\n\nfunction currentCountry() {\n  return _regeneratorRuntime.async(function currentCountry$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(axios.get('https://extreme-ip-lookup.com/json/').then(function (res) {\n            return res.data.country;\n          })[\"catch\"](function (e) {\n            return 'Israel';\n          }));\n\n        case 2:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction useStats(url, country) {\n  var _useState = useState(),\n      stats = _useState[0],\n      setStats = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      error = _useState3[0],\n      setError = _useState3[1];\n\n  console.log(country);\n  useEffect(function () {\n    function fetchData() {\n      var searchCountry, data;\n      return _regeneratorRuntime.async(function fetchData$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              console.log('fetching data');\n              setLoading(true);\n              setError();\n              _context2.t0 = country;\n\n              if (_context2.t0) {\n                _context2.next = 8;\n                break;\n              }\n\n              _context2.next = 7;\n              return _regeneratorRuntime.awrap(currentCountry());\n\n            case 7:\n              _context2.t0 = _context2.sent;\n\n            case 8:\n              searchCountry = _context2.t0;\n              console.log(searchCountry);\n              _context2.next = 12;\n              return _regeneratorRuntime.awrap(fetch(url).then(function (res) {\n                return res.json();\n              }).then(function (d) {\n                return getCountry(d)(searchCountry);\n              })[\"catch\"](function (err) {\n                return setError(err);\n              }));\n\n            case 12:\n              data = _context2.sent;\n              setStats(data);\n              setLoading(false);\n\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    fetchData();\n  }, [country]);\n  return {\n    stats: stats,\n    loading: loading,\n    error: error\n  };\n}\n\nexport default useStats;","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/utils/useStats.js"],"names":["useState","useEffect","axios","getCountry","list","queryCountry","reduce","a","c","country","currentCountry","get","then","res","data","e","useStats","url","stats","setStats","loading","setLoading","error","setError","console","log","fetchData","searchCountry","fetch","json","d","err"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAAyB;AACvB,SAAO,UAASC,YAAT,EAAuB;AAC5B,WAAOD,IAAI,CAACE,MAAL,CAAY,UAACC,CAAD,EAAGC,CAAH;AAAA,aAASA,CAAC,CAACC,OAAF,KAAcJ,YAAd,GAA6BG,CAA7B,GAAiCD,CAA1C;AAAA,KAAZ,EAAyD,EAAzD,CAAP;AACD,GAFD;AAGD;;AAED,SAAeG,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACeR,KAAK,CACfS,GADU,CACN,qCADM,EAEVC,IAFU,CAEL,UAAAC,GAAG;AAAA,mBAAIA,GAAG,CAACC,IAAJ,CAASL,OAAb;AAAA,WAFE,WAGJ,UAAAM,CAAC;AAAA,mBAAI,QAAJ;AAAA,WAHG,CADf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,SAASC,QAAT,CAAkBC,GAAlB,EAAuBR,OAAvB,EAAgC;AAAA,kBACJT,QAAQ,EADJ;AAAA,MACvBkB,KADuB;AAAA,MAChBC,QADgB;;AAAA,mBAEAnB,QAAQ,CAAC,KAAD,CAFR;AAAA,MAEvBoB,OAFuB;AAAA,MAEdC,UAFc;;AAAA,mBAGJrB,QAAQ,CAAC,KAAD,CAHJ;AAAA,MAGvBsB,KAHuB;AAAA,MAGhBC,QAHgB;;AAK9BC,EAAAA,OAAO,CAACC,GAAR,CAAYhB,OAAZ;AAEAR,EAAAA,SAAS,CAAC,YAAM;AAEd,aAAeyB,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACEF,cAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAJ,cAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,cAAAA,QAAQ;AAHV,6BAIsBd,OAJtB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAIuCC,cAAc,EAJrD;;AAAA;AAAA;;AAAA;AAIMiB,cAAAA,aAJN;AAKEH,cAAAA,OAAO,CAACC,GAAR,CAAYE,aAAZ;AALF;AAAA,+CAOqBC,KAAK,CAACX,GAAD,CAAL,CACdL,IADc,CACT,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACgB,IAAJ,EAAJ;AAAA,eADM,EAEdjB,IAFc,CAET,UAAAkB,CAAC;AAAA,uBAAI3B,UAAU,CAAC2B,CAAD,CAAV,CAAcH,aAAd,CAAJ;AAAA,eAFQ,WAGR,UAAAI,GAAG;AAAA,uBAAIR,QAAQ,CAACQ,GAAD,CAAZ;AAAA,eAHK,CAPrB;;AAAA;AAOQjB,cAAAA,IAPR;AAWEK,cAAAA,QAAQ,CAACL,IAAD,CAAR;AACAO,cAAAA,UAAU,CAAC,KAAD,CAAV;;AAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcAK,IAAAA,SAAS;AACV,GAjBQ,EAiBN,CAACjB,OAAD,CAjBM,CAAT;AAkBA,SAAO;AACLS,IAAAA,KAAK,EAALA,KADK;AACEE,IAAAA,OAAO,EAAPA,OADF;AACWE,IAAAA,KAAK,EAALA;AADX,GAAP;AAGD;;AAED,eAAeN,QAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nfunction getCountry(list){\n  return function(queryCountry) {\n    return list.reduce((a,c) => c.country === queryCountry ? c : a, {})\n  }\n}\n\nasync function currentCountry(){\n  return await axios\n    .get('https://extreme-ip-lookup.com/json/')\n    .then(res => res.data.country)\n    .catch(e => 'Israel')\n}\n\nfunction useStats(url, country) {\n  const [stats, setStats] = useState();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  console.log(country);\n\n  useEffect(() => {\n\n    async function fetchData() {\n      console.log('fetching data');\n      setLoading(true)\n      setError()\n      let searchCountry = country || await currentCountry();\n      console.log(searchCountry);\n\n      const data = await fetch(url)\n          .then(res => res.json())\n          .then(d => getCountry(d)(searchCountry))\n          .catch(err => setError(err))\n      setStats(data)\n      setLoading(false)\n    }\n    fetchData();\n  }, [country])\n  return {\n    stats, loading, error\n  }\n}\n\nexport default useStats;\n"]},"metadata":{},"sourceType":"module"}