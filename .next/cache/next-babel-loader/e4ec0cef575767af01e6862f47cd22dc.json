{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport sortForChart from './sortForChart';\nvar baseURL = \"http://46.101.156.51:3003/api/v1/alltime/\";\n\nfunction currentCountry() {\n  return _regeneratorRuntime.async(function currentCountry$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(axios.get('https://extreme-ip-lookup.com/json/').then(function (res) {\n            return res.data.country;\n          })[\"catch\"](function (e) {\n            return 'israel';\n          }));\n\n        case 2:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction useTime(country) {\n  var url,\n      _useState,\n      timeStats,\n      setData,\n      _useState2,\n      countryStats,\n      setCountryStats,\n      _useState3,\n      timeLoading,\n      setLoading,\n      _useState4,\n      timeError,\n      setError,\n      _useState5,\n      geo,\n      setGeo,\n      fetchData,\n      _args4 = arguments;\n\n  return _regeneratorRuntime.async(function useTime$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          fetchData = function _ref(cn) {\n            var URL, data, timeStats;\n            return _regeneratorRuntime.async(function fetchData$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    setLoading(true);\n                    setError();\n                    URL = cn === 'world' ? baseURL : baseURL + geo;\n                    console.log(URL);\n                    _context3.next = 6;\n                    return _regeneratorRuntime.awrap(axios.get(URL).then(function (res) {\n                      return res.data;\n                    })[\"catch\"](function (err) {\n                      return setError(err);\n                    }));\n\n                  case 6:\n                    data = _context3.sent;\n                    timeStats = sortForChart(data);\n                    console.log(timeStats);\n                    setData(timeStats);\n                    setLoading(false);\n\n                  case 11:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          };\n\n          url = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : baseURL;\n          _useState = useState(), timeStats = _useState[0], setData = _useState[1];\n          _useState2 = useState(), countryStats = _useState2[0], setCountryStats = _useState2[1];\n          _useState3 = useState(false), timeLoading = _useState3[0], setLoading = _useState3[1];\n          _useState4 = useState(false), timeError = _useState4[0], setError = _useState4[1];\n          _useState5 = useState(''), geo = _useState5[0], setGeo = _useState5[1];\n          useEffect(function () {\n            console.log('inside Geo Location Effect');\n\n            (function _callee() {\n              var geoLocation;\n              return _regeneratorRuntime.async(function _callee$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      _context2.next = 2;\n                      return _regeneratorRuntime.awrap(currentCountry());\n\n                    case 2:\n                      geoLocation = _context2.sent;\n                      setGeo(geoLocation);\n\n                    case 4:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            })();\n          }, []);\n          // useEffect(() => {\n          //   console.log('inside World effect');\n          //   fetchData('world')\n          // }, [])\n          useEffect(function () {\n            console.log('inside Country Effect');\n            fetchData(country || geo);\n          }, [country]);\n          return _context4.abrupt(\"return\", {\n            countryStats: countryStats,\n            timeStats: timeStats,\n            timeLoading: timeLoading,\n            timeError: timeError\n          });\n\n        case 10:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport default useTime;","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/utils/useTime.js"],"names":["useState","useEffect","axios","sortForChart","baseURL","currentCountry","get","then","res","data","country","e","useTime","fetchData","cn","setLoading","setError","URL","geo","console","log","err","timeStats","setData","url","countryStats","setCountryStats","timeLoading","timeError","setGeo","geoLocation"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,IAAMC,OAAO,8CAAb;;AAEA,SAAeC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACeH,KAAK,CACfI,GADU,CACN,qCADM,EAEVC,IAFU,CAEL,UAAAC,GAAG;AAAA,mBAAIA,GAAG,CAACC,IAAJ,CAASC,OAAb;AAAA,WAFE,WAGJ,UAAAC,CAAC;AAAA,mBAAI,QAAJ;AAAA,WAHG,CADf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,SAAeC,OAAf,CAAuBF,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAeiBG,SAfjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAeiBA,UAAAA,SAfjB,iBAe2BC,EAf3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBIC,oBAAAA,UAAU,CAAC,IAAD,CAAV;AACAC,oBAAAA,QAAQ;AAEFC,oBAAAA,GAnBV,GAmBgBH,EAAE,KAAK,OAAP,GAAiBV,OAAjB,GAA2BA,OAAO,GAAGc,GAnBrD;AAoBIC,oBAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AApBJ;AAAA,qDAqBuBf,KAAK,CAACI,GAAN,CAAUW,GAAV,EAChBV,IADgB,CACX,UAAAC,GAAG;AAAA,6BAAIA,GAAG,CAACC,IAAR;AAAA,qBADQ,WAEV,UAAAY,GAAG;AAAA,6BAAIL,QAAQ,CAACK,GAAD,CAAZ;AAAA,qBAFO,CArBvB;;AAAA;AAqBUZ,oBAAAA,IArBV;AAwBUa,oBAAAA,SAxBV,GAwBsBnB,YAAY,CAACM,IAAD,CAxBlC;AAyBIU,oBAAAA,OAAO,CAACC,GAAR,CAAYE,SAAZ;AACAC,oBAAAA,OAAO,CAACD,SAAD,CAAP;AACAP,oBAAAA,UAAU,CAAC,KAAD,CAAV;;AA3BJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAgCS,UAAAA,GAAhC,8DAAsCpB,OAAtC;AAAA,sBAC+BJ,QAAQ,EADvC,EACSsB,SADT,iBACoBC,OADpB;AAAA,uBAE0CvB,QAAQ,EAFlD,EAESyB,YAFT,kBAEuBC,eAFvB;AAAA,uBAGoC1B,QAAQ,CAAC,KAAD,CAH5C,EAGS2B,WAHT,kBAGsBZ,UAHtB;AAAA,uBAIgCf,QAAQ,CAAC,KAAD,CAJxC,EAIS4B,SAJT,kBAIoBZ,QAJpB;AAAA,uBAKwBhB,QAAQ,CAAC,EAAD,CALhC,EAKSkB,GALT,kBAKcW,MALd;AAOE5B,UAAAA,SAAS,CAAC,YAAM;AACdkB,YAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;;AACA,aAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDACyBf,cAAc,EADvC;;AAAA;AACKyB,sBAAAA,WADL;AAECD,sBAAAA,MAAM,CAACC,WAAD,CAAN;;AAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAD;AAID,WANQ,EAMN,EANM,CAAT;AAuBA;AACA;AACA;AACA;AAEA7B,UAAAA,SAAS,CAAC,YAAM;AACdkB,YAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAP,YAAAA,SAAS,CAACH,OAAO,IAAIQ,GAAZ,CAAT;AACD,WAHQ,EAGN,CAACR,OAAD,CAHM,CAAT;AAnCF,4CAyCS;AACLe,YAAAA,YAAY,EAAZA,YADK;AACSH,YAAAA,SAAS,EAATA,SADT;AACoBK,YAAAA,WAAW,EAAXA,WADpB;AACiCC,YAAAA,SAAS,EAATA;AADjC,WAzCT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA8CA,eAAehB,OAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport sortForChart from './sortForChart'\n\nconst baseURL = `http://46.101.156.51:3003/api/v1/alltime/`\n\nasync function currentCountry(){\n  return await axios\n    .get('https://extreme-ip-lookup.com/json/')\n    .then(res => res.data.country)\n    .catch(e => 'israel')\n}\n\nasync function useTime(country, url = baseURL) {\n  const [timeStats, setData] = useState();\n  const [countryStats, setCountryStats] = useState();\n  const [timeLoading, setLoading] = useState(false);\n  const [timeError, setError] = useState(false);\n  const [geo, setGeo] = useState('')\n\n  useEffect(() => {\n    console.log('inside Geo Location Effect');\n    (async () => {\n      let geoLocation = await currentCountry()\n      setGeo(geoLocation)\n    })()\n  }, [])\n\n  async function fetchData(cn) {\n    setLoading(true)\n    setError()\n\n    const URL = cn === 'world' ? baseURL : baseURL + geo\n    console.log(URL);\n    const data = await axios.get(URL)\n      .then(res => res.data)\n      .catch(err => setError(err))\n    const timeStats = sortForChart(data);\n    console.log(timeStats);\n    setData(timeStats)\n    setLoading(false)\n  }\n\n  // useEffect(() => {\n  //   console.log('inside World effect');\n  //   fetchData('world')\n  // }, [])\n\n  useEffect(() => {\n    console.log('inside Country Effect');\n    fetchData(country || geo);\n  }, [country])\n\n\n  return {\n    countryStats, timeStats, timeLoading, timeError\n  }\n}\n\nexport default useTime;\n"]},"metadata":{},"sourceType":"module"}