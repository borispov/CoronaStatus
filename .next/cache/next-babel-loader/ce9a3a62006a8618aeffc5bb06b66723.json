{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { themes } from './themes';\n\nconst theme = _objectSpread({}, themes['common'], {}, themes['light']);\n\nconst firstWhole = (arr, n = 0) => {\n  if (arr[n] > 0) return n;\n  if (arr[n] == undefined) return 0;\n  n++;\n  return firstWhole(arr, n);\n};\n\nconst parseLabel = label => {\n  let d = new Date(label);\n  return d.getDate() + '.' + ('0' + (d.getMonth() + 1)).toString();\n};\n\nconst sortForChart = obj => {\n  const zeroNull = c => c === null ? 0 : c;\n\n  const sortedObj = obj.sort((a, b) => new Date(a.date) - new Date(b.date));\n  const initCasesArray = sortedObj.map(o => o.total_cases);\n  const firstNumIndex = firstWhole(initCasesArray);\n  const fObj = sortedObj.slice(firstNumIndex);\n  const cases = fObj.map(o => o.total_cases);\n  const labels = fObj.map(o => parseLabel(o.date));\n  const deaths = fObj.map(o => zeroNull(o.total_deaths));\n  const newCases = fObj.map(o => zeroNull(o.new_cases));\n  const label = obj[0].location;\n  const datasets = [{\n    label: 'new cases',\n    data: newCases,\n    backgroundColor: '#fc3111',\n    borderColor: theme && theme.successDefault,\n    strokeColor: theme && theme.successDefault,\n    pointRadius: 2,\n    borderWidth: 4,\n    fill: true\n  }, {\n    label: 'deaths',\n    data: deaths,\n    backgroundColor: 'rgba(29,82,209,1) 100%)',\n    backgroundColor: '#333',\n    borderColor: theme && theme.blue,\n    strokeColor: theme && theme.blue,\n    pointRadius: 2,\n    borderWidth: 4\n  }, {\n    label: 'cases',\n    data: cases,\n    backgroundColor: 'linear-gradient(90deg, #000, #000)',\n    borderColor: theme && theme.primaryLight || '#6200ee',\n    strokeColor: theme && theme.primaryLight || '#ADFF2F',\n    borderWidth: 5,\n    borderCapStyle: 'butt',\n    borderJoinStyle: 'miter',\n    pointHoverRadius: 5,\n    pointHoverBorderWidth: 2,\n    pointRadius: 2,\n    pointHitRadius: 10\n  }];\n  return {\n    datasets,\n    labels,\n    label\n  };\n};\n\nexport default sortForChart;","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/utils/sortForChart.js"],"names":["themes","theme","firstWhole","arr","n","undefined","parseLabel","label","d","Date","getDate","getMonth","toString","sortForChart","obj","zeroNull","c","sortedObj","sort","a","b","date","initCasesArray","map","o","total_cases","firstNumIndex","fObj","slice","cases","labels","deaths","total_deaths","newCases","new_cases","location","datasets","data","backgroundColor","borderColor","successDefault","strokeColor","pointRadius","borderWidth","fill","blue","primaryLight","borderCapStyle","borderJoinStyle","pointHoverRadius","pointHoverBorderWidth","pointHitRadius"],"mappings":"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","sourcesContent":["import { themes } from './themes'\n\nconst theme = {\n  ...themes['common'],\n  ...themes['light']\n}\n\nconst firstWhole = (arr, n = 0) => {\n  if (arr[n] > 0) return n\n  if (arr[n] == undefined) return 0\n  n++\n  return firstWhole(arr, n)\n}\n\nconst parseLabel = label => {\n  let d = new Date(label)\n  return d.getDate() + '.' + ('0' + (d.getMonth()+1)).toString()\n}\n\nconst sortForChart = (obj) => {\n\n  const zeroNull = c => c === null ? 0 : c\n  const sortedObj = obj.sort((a,b) => new Date(a.date) - new Date(b.date))\n\n  const initCasesArray = sortedObj.map(o => o.total_cases)\n  const firstNumIndex = firstWhole(initCasesArray)\n  const fObj = sortedObj.slice(firstNumIndex)\n  const cases = fObj.map(o => o.total_cases)\n  const labels = fObj.map(o => parseLabel(o.date))\n  const deaths = fObj.map(o => zeroNull(o.total_deaths))\n  const newCases = fObj.map(o => zeroNull(o.new_cases))\n  const label = obj[0].location\n\n  const datasets = [\n    {\n      label: 'new cases',\n      data: newCases,\n      backgroundColor: '#fc3111',\n      borderColor: theme && theme.successDefault,\n      strokeColor: theme && theme.successDefault,\n      pointRadius: 2,\n      borderWidth: 4,\n      fill: true,\n    },\n    {\n      label: 'deaths',\n      data: deaths,\n      backgroundColor: 'rgba(29,82,209,1) 100%)',\n      backgroundColor: '#333',\n      borderColor: theme && theme.blue,\n      strokeColor: theme && theme.blue,\n      pointRadius: 2,\n      borderWidth: 4,\n    },\n    {\n      label: 'cases',\n      data: cases,\n      backgroundColor: 'linear-gradient(90deg, #000, #000)',\n      borderColor: theme && theme.primaryLight || '#6200ee',\n      strokeColor: theme && theme.primaryLight || '#ADFF2F',\n      borderWidth: 5,\n\n      borderCapStyle: 'butt',\n      borderJoinStyle: 'miter',\n      pointHoverRadius: 5,\n      pointHoverBorderWidth: 2,\n      pointRadius: 2,\n      pointHitRadius: 10,\n\n    }\n  ]\n\n  return {\n    datasets,\n    labels,\n    label\n  }\n}\n\nexport default sortForChart\n"]},"metadata":{},"sourceType":"module"}