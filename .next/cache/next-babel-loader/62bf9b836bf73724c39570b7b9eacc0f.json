{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nvar capitalize = function capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.toLowerCase().slice(1);\n};\n\nvar parseCn = function parseCn(str) {\n  return str === 'usa' || str === 'Usa' || str === 'United States' ? 'USA' : str === 'Uk' || str === 'England' || str === 'United Kingdom' || str == 'great britain' ? 'UK' : str.toLowerCase();\n};\n\nfunction getCountry(list) {\n  return function (queryCountry) {\n    return list.reduce(function (a, c) {\n      return c.country === queryCountry ? c : a;\n    }, {});\n  };\n}\n\nfunction currentCountry() {\n  return _regeneratorRuntime.async(function currentCountry$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(axios.get('https://extreme-ip-lookup.com/json/').then(function (res) {\n            return res.data.country;\n          })[\"catch\"](function (e) {\n            return 'israel';\n          }));\n\n        case 2:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction useYday(url, country) {\n  var _useState = useState(),\n      ydayStats = _useState[0],\n      setStats = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      error = _useState3[0],\n      setError = _useState3[1];\n\n  useEffect(function () {\n    function fetchData() {\n      var searchCountry, parsedCountry, URL, _ref, data, relevant;\n\n      return _regeneratorRuntime.async(function fetchData$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setLoading(true);\n              setError();\n              _context2.t0 = country;\n\n              if (_context2.t0) {\n                _context2.next = 7;\n                break;\n              }\n\n              _context2.next = 6;\n              return _regeneratorRuntime.awrap(currentCountry());\n\n            case 6:\n              _context2.t0 = _context2.sent;\n\n            case 7:\n              searchCountry = _context2.t0;\n              parsedCountry = parseCn(searchCountry);\n              URL = url + 'today/' + parsedCountry.toLowerCase(); // const URL = url + (country === 'world' ? '' : searchCountry)\n\n              _context2.prev = 10;\n              _context2.next = 13;\n              return _regeneratorRuntime.awrap(axios.get(URL + '?yesterday=true'));\n\n            case 13:\n              _ref = _context2.sent;\n              data = _ref.data;\n              relevant = {\n                active: data.active,\n                cases: data.cases,\n                todayCases: data.todayCases,\n                recovered: data.recovered,\n                deaths: data.deaths,\n                country: data.country\n              };\n              setStats(relevant);\n              setLoading(false);\n              _context2.next = 23;\n              break;\n\n            case 20:\n              _context2.prev = 20;\n              _context2.t1 = _context2[\"catch\"](10);\n              setError(_context2.t1);\n\n            case 23:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[10, 20]], Promise);\n    }\n\n    fetchData();\n  }, [country]);\n  return {\n    ydayStats: ydayStats,\n    loading: loading,\n    error: error\n  };\n}\n\nexport default useYday;","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/utils/useYday.js"],"names":["useState","useEffect","axios","capitalize","str","charAt","toUpperCase","toLowerCase","slice","parseCn","getCountry","list","queryCountry","reduce","a","c","country","currentCountry","get","then","res","data","e","useYday","url","ydayStats","setStats","loading","setLoading","error","setError","fetchData","searchCountry","parsedCountry","URL","relevant","active","cases","todayCases","recovered","deaths"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nconst capitalize = str => str.charAt(0).toUpperCase() + str.toLowerCase().slice(1)\nconst parseCn = str => {\n  return str === 'usa' || str === 'Usa' || str === 'United States'\n    ? 'USA' \n      : str === 'Uk' || str === 'England' || str === 'United Kingdom' || str == 'great britain'\n    ? 'UK' \n    : str.toLowerCase();\n}\n\nfunction getCountry(list){\n  return function(queryCountry) {\n    return list.reduce((a,c) => c.country === queryCountry ? c : a, {})\n  }\n}\n\nasync function currentCountry(){\n  return await axios\n    .get('https://extreme-ip-lookup.com/json/')\n    .then(res => res.data.country)\n    .catch(e => 'israel')\n}\n\nfunction useYday(url, country) {\n  const [ydayStats, setStats] = useState();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n\n    async function fetchData() {\n      setLoading(true)\n      setError()\n      let searchCountry = country || await currentCountry();\n\n      const parsedCountry = parseCn(searchCountry);\n      const URL = url + 'today/' + parsedCountry.toLowerCase()\n      // const URL = url + (country === 'world' ? '' : searchCountry)\n      try {\n        // const data = await fetch(URL)\n        //     .then(res => res.json())\n        //     .catch(err => setError(err))\n        const { data } = await axios.get(URL + '?yesterday=true')\n        const relevant = {\n          active: data.active,\n          cases: data.cases,\n          todayCases: data.todayCases,\n          recovered: data.recovered,\n          deaths: data.deaths,\n          country: data.country\n        }\n        setStats(relevant)\n        setLoading(false)\n       } catch(e) {\n        setError(e)\n      }\n    }\n    fetchData();\n  }, [country])\n  return {\n    ydayStats, loading, error\n  }\n}\n\nexport default useYday;\n"]},"metadata":{},"sourceType":"module"}