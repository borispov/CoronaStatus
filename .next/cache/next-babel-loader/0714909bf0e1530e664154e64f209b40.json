{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/raypo/Desktop/Projectos/CoronaStatus/pages/_app.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect, useState } from 'react';\nimport App from 'next/app';\nimport Router from 'next/router';\nimport { ThemeProvider } from 'styled-components';\nimport GlobalStyle from './Global';\nimport Link from 'next/link';\nimport Header from '../components/Header';\nimport { Button } from '../components/S';\nimport Burger from '../components/Burger';\nimport Menu from '../components/Menu';\nimport { MoonIcon, SunIcon, WorldIcon } from '../components/Icons/ThemeIcon';\nimport { themes } from '../utils/themes';\nimport * as gtag from '../utils/gtag';\nRouter.events.on('routeChangeComplete', function (url) {\n  return gtag.pageview(url);\n});\n\nvar lightTheme = function lightTheme() {\n  return _objectSpread({}, themes['common'], {}, themes['light']);\n};\n\nvar darkTheme = function darkTheme() {\n  return _objectSpread({}, themes['common'], {}, themes['dark']);\n};\n\nexport default (function (props) {\n  var _useState = useState(lightTheme()),\n      theme = _useState[0],\n      setTheme = _useState[1];\n\n  var _useState2 = useState(true),\n      isHeb = _useState2[0],\n      setHeb = _useState2[1];\n\n  var _useState3 = useState(false),\n      menuOpen = _useState3[0],\n      setOpen = _useState3[1];\n\n  var toggleMenu = function toggleMenu() {\n    return setOpen(!menuOpen);\n  };\n\n  var toggleLang = function toggleLang() {\n    return setHebwhh;\n  };\n\n  var setDarkTheme = function setDarkTheme() {\n    return setTheme(setDarkTheme());\n  };\n\n  var setLightTheme = function setLightTheme() {\n    return setTheme(setLightTheme());\n  };\n\n  var displayLang = isHeb ? 'English' : 'עברית';\n  var isLight = theme.type === 'light';\n\n  var themeButton = isLight && __jsx(MoonIcon, {\n    onClick: setDarkTheme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }) || __jsx(SunIcon, {\n    onClick: setLightTheme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  });\n\n  var Component = props.Component,\n      pageProps = props.pageProps;\n  return __jsx(ThemeProvider, {\n    theme: theme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, __jsx(GlobalStyle, {\n    isHeb: isHeb,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), __jsx(Header, {\n    title: \"nCorona\",\n    isHeb: isHeb,\n    closeMenu: closeMenu,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, __jsx(Burger, {\n    setOpen: toggleMenu,\n    open: menuOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), __jsx(Menu, {\n    setOpen: toggleMenu,\n    open: menuOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    onClick: isLight ? setDarkTheme : setLightTheme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, isLight ? '🌒' : '🌞'), isLight ? isHeb && 'מצב לילה' || 'Dark Mode' : isHeb && 'מצב יום' || 'Light Mode'), __jsx(\"a\", {\n    onClick: _this.toggleLang,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"\\uD83C\\uDF10\"), displayLang), __jsx(Link, {\n    href: \"/News\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    alt: \"news\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"\\uD83D\\uDCF0\"), isHeb && 'חדשות' || 'News')))), __jsx(Component, _extends({}, pageProps, {\n    isHeb: isHeb,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  })));\n}); // export default class MyApp extends App {\n//\n//   state = {\n//     theme: lightTheme(),\n//     isHeb: true,\n//     menuOpen: false\n//   }\n//\n//   toggleMenu    = () => this.setState({ menuOpen: !this.state.menuOpen })\n//   toggleLang    = () => this.setState({ isHeb: !this.state.isHeb })\n//   setDarkTheme  = () => this.setState(prevState => ({ ...prevState, theme: darkTheme() }))\n//   setLightTheme = () => this.setState(prevState => ({ ...prevState, theme: lightTheme() }))\n//\n//   render() {\n//     const { theme, isHeb }  = this.state\n//     const displayLang       = isHeb ? 'English' : 'עברית'\n//     const isLight           = theme.type === 'light'\n//     const themeButton       = isLight\n//       && <MoonIcon onClick={this.setDarkTheme} />\n//       || <SunIcon onClick={this.setLightTheme} />\n//\n//     const { Component, pageProps } = this.props\n//\n//     return (\n//       <ThemeProvider theme={theme}>\n//         <GlobalStyle isHeb={isHeb}/>\n//         <Header title='nCorona' isHeb={isHeb} closeMenu={this.closeMenu}>\n//           <Burger setOpen={this.toggleMenu} open={this.state.menuOpen} />\n//           <Menu setOpen={this.toggleMenu} open={this.state.menuOpen} >\n//             <a onClick={isLight ? this.setDarkTheme : this.setLightTheme}>\n//               <span>{ isLight ? '🌒' : '🌞'}</span>\n//               {\n//                 isLight\n//                   ? (isHeb && 'מצב לילה' || 'Dark Mode')\n//                   : (isHeb && 'מצב יום' || 'Light Mode')\n//               }\n//             </a>\n//             <a onClick={this.toggleLang}>\n//               <span>&#127760;</span>\n//               {displayLang}\n//             </a>\n//             <Link href=\"/News\">\n//               <a alt=\"news\">\n//                 <span>&#128240;</span>\n//                 { isHeb && 'חדשות' || 'News' }\n//               </a>\n//             </Link>\n//\n//           </Menu>\n//\n//         </Header>\n//         <Component {...pageProps} isHeb={isHeb}/>\n//       </ThemeProvider>\n//     )\n//   }\n// }","map":{"version":3,"sources":["/Users/raypo/Desktop/Projectos/CoronaStatus/pages/_app.js"],"names":["useEffect","useState","App","Router","ThemeProvider","GlobalStyle","Link","Header","Button","Burger","Menu","MoonIcon","SunIcon","WorldIcon","themes","gtag","events","on","url","pageview","lightTheme","darkTheme","props","theme","setTheme","isHeb","setHeb","menuOpen","setOpen","toggleMenu","toggleLang","setHebwhh","setDarkTheme","setLightTheme","displayLang","isLight","type","themeButton","Component","pageProps","closeMenu"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\nimport App from 'next/app'\nimport Router from 'next/router'\nimport { ThemeProvider } from 'styled-components'\nimport GlobalStyle from './Global'\nimport Link from 'next/link';\n\nimport Header from '../components/Header'\nimport { Button } from '../components/S'\n\nimport Burger from '../components/Burger';\nimport Menu from '../components/Menu';\n\nimport { MoonIcon, SunIcon, WorldIcon } from '../components/Icons/ThemeIcon'\nimport { themes } from '../utils/themes'\nimport * as gtag from '../utils/gtag'\n\nRouter.events.on('routeChangeComplete', url => gtag.pageview(url))\n\nconst lightTheme = () => ({\n  ...themes['common'],\n  ...themes['light'],\n})\n\nconst darkTheme = () => ({\n  ...themes['common'],\n  ...themes['dark'],\n})\n\n\nexport default (props) => {\n  const [theme, setTheme] = useState(lightTheme())\n  const [isHeb, setHeb] = useState(true)\n  const [menuOpen, setOpen] = useState(false)\n\n  const toggleMenu    = () => setOpen(!menuOpen)\n  const toggleLang    = () => setHebwhh\n  const setDarkTheme  = () => setTheme(setDarkTheme())\n  const setLightTheme = () => setTheme(setLightTheme())\n\n\n  const displayLang       = isHeb ? 'English' : 'עברית'\n  const isLight           = theme.type === 'light'\n  const themeButton       = isLight\n    && <MoonIcon onClick={setDarkTheme} />\n    || <SunIcon onClick={setLightTheme} />\n\n  const { Component, pageProps } = props\n\n\n  return (\n    <ThemeProvider theme={theme}>\n\n      <GlobalStyle isHeb={isHeb}/>\n      <Header title='nCorona' isHeb={isHeb} closeMenu={closeMenu}>\n        <Burger setOpen={toggleMenu} open={menuOpen} />\n        <Menu setOpen={toggleMenu} open={menuOpen} >\n          <a onClick={isLight ?setDarkTheme :setLightTheme}>\n            <span>{ isLight ? '🌒' : '🌞'}</span>\n            {\n              isLight\n                ? (isHeb && 'מצב לילה' || 'Dark Mode')\n                : (isHeb && 'מצב יום' || 'Light Mode')\n            }\n          </a>\n          <a onClick={this.toggleLang}>\n            <span>&#127760;</span>\n            {displayLang}\n          </a>\n          <Link href=\"/News\">\n            <a alt=\"news\">\n              <span>&#128240;</span>\n              { isHeb && 'חדשות' || 'News' }\n            </a>\n          </Link>\n\n        </Menu>\n\n      </Header>\n      <Component {...pageProps} isHeb={isHeb}/>\n    </ThemeProvider>\n  )\n\n}\n\n\n\n\n// export default class MyApp extends App {\n//\n//   state = {\n//     theme: lightTheme(),\n//     isHeb: true,\n//     menuOpen: false\n//   }\n//\n//   toggleMenu    = () => this.setState({ menuOpen: !this.state.menuOpen })\n//   toggleLang    = () => this.setState({ isHeb: !this.state.isHeb })\n//   setDarkTheme  = () => this.setState(prevState => ({ ...prevState, theme: darkTheme() }))\n//   setLightTheme = () => this.setState(prevState => ({ ...prevState, theme: lightTheme() }))\n//\n//   render() {\n//     const { theme, isHeb }  = this.state\n//     const displayLang       = isHeb ? 'English' : 'עברית'\n//     const isLight           = theme.type === 'light'\n//     const themeButton       = isLight\n//       && <MoonIcon onClick={this.setDarkTheme} />\n//       || <SunIcon onClick={this.setLightTheme} />\n//\n//     const { Component, pageProps } = this.props\n//\n//     return (\n//       <ThemeProvider theme={theme}>\n//         <GlobalStyle isHeb={isHeb}/>\n//         <Header title='nCorona' isHeb={isHeb} closeMenu={this.closeMenu}>\n//           <Burger setOpen={this.toggleMenu} open={this.state.menuOpen} />\n//           <Menu setOpen={this.toggleMenu} open={this.state.menuOpen} >\n//             <a onClick={isLight ? this.setDarkTheme : this.setLightTheme}>\n//               <span>{ isLight ? '🌒' : '🌞'}</span>\n//               {\n//                 isLight\n//                   ? (isHeb && 'מצב לילה' || 'Dark Mode')\n//                   : (isHeb && 'מצב יום' || 'Light Mode')\n//               }\n//             </a>\n//             <a onClick={this.toggleLang}>\n//               <span>&#127760;</span>\n//               {displayLang}\n//             </a>\n//             <Link href=\"/News\">\n//               <a alt=\"news\">\n//                 <span>&#128240;</span>\n//                 { isHeb && 'חדשות' || 'News' }\n//               </a>\n//             </Link>\n//\n//           </Menu>\n//\n//         </Header>\n//         <Component {...pageProps} isHeb={isHeb}/>\n//       </ThemeProvider>\n//     )\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}