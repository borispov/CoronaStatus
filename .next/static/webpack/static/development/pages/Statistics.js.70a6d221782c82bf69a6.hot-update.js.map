{"version":3,"file":"static/webpack/static/development/pages/Statistics.js.70a6d221782c82bf69a6.hot-update.js","sources":["webpack:///./components/Table/Table.js"],"sourcesContent":["import styled, { withTheme } from 'styled-components'\nimport Cell from './Cell'\nimport { FadeIn } from '../S'\n\nconst ScrollTable = styled.div`\n  overflow-x: auto;\n`\n\nconst DataTable = styled.div`\n  max-width: 100%;\n`\n\nconst Table = styled.table`\n  position: relative;\n  clear: both;\n  border-collapse: separate;\n  margin: 0 auto;\n  border-spacing: 0px;\n  background: #fff;\n  box-shadow: 0 1px 0 0 rgba(22, 29, 37, 0.05);\n  width: auto;\n`\n\nconst colors = {\n  0: 'onPrimary',\n  1: 'successDefault',\n  2: 'error2',\n  3: 'active2',\n  4: 'purpleComp',\n  5: 'error',\n  6: 'menuHover',\n  7: 'menuColor'\n}\n\nexport default ({ headings, theme, isHeb, rows }) => {\n\n  const renderHeadingRow = (_cell, cellIndex) => (\n    <Cell\n      key={`heading-${cellIndex}`}\n      content={ headings[cellIndex] }\n      header={true}\n    />\n  )\n\n  const renderRow = (_row, rowIndex) => {\n\n      return (\n        <tr key={`row-${rowIndex}`}>\n          {rows[rowIndex].map((_cell, cellIndex) => {\n            return (\n              <Cell\n                key={`${rowIndex}-${cellIndex}`}\n                cellColor={colors[cellIndex] || 'onPrimary'}\n                country={!cellIndex}\n                content={\n                  cellIndex === 0 \n                    ? (\n                        <>\n                          <img width='24' height='24' src={rows[rowIndex][cellIndex]['flag']} />\n                          <span>{rows[rowIndex][cellIndex]['country']}</span>\n                        </>\n                      )\n                    : rows[rowIndex][cellIndex]\n                }\n                // content={rows[rowIndex][cellIndex]}\n              />\n            )\n          })}\n        </tr>\n      )\n    };\n\n\n    const theadMarkup = (\n      <tr\n        role='row'\n        key=\"heading\">\n        {headings.map(renderHeadingRow)}\n      </tr>\n    );\n\n    const tbodyMarkup = rows.map(renderRow);\n\n    return (\n      <DataTable>\n      <FadeIn duration=\"0.5s\" delay=\"0.1s\">\n        <ScrollTable>\n          <Table>\n            <thead>{theadMarkup}</thead>\n            <tbody>{tbodyMarkup}</tbody>\n          </Table>\n        </ScrollTable>\n      </FadeIn>\n      </DataTable>\n    );\n\n\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAOA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAGA;AACA;AAEA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;A","sourceRoot":""}