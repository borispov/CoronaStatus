{"version":3,"file":"static/webpack/static/development/pages/_app.js.5004ec8f26710b95de91.hot-update.js","sources":["webpack:///./pages/_app.js"],"sourcesContent":["import App from 'next/app'\nimport Router from 'next/router'\nimport Link from 'next/link';\nimport { useState, useRef } from 'react'\nimport { ThemeProvider } from 'styled-components'\nimport axios from 'axios'\n\nimport ProxyView from '../components/proxy-view'\nimport { ProxyContextProvider } from '../context/proxy-context'\nimport useOutSide from '../utils/useOutSide'\nimport GlobalStyle from './Global'\nimport Header from '../components/Header'\nimport Burger from '../components/Burger';\nimport Menu from '../components/Menu';\nimport { MoonIcon, SunIcon, WorldIcon } from '../components/Icons/ThemeIcon'\nimport { themes } from '../utils/themes'\nimport * as gtag from '../utils/gtag'\n\nconst getCountryFromData = response => response.data.country\nconst currentCountry = async (url) => await axios.get(url).then(getCountryFromData).catch(e => 'israel')\n\n// async function currentCountry(url){\n//   return await axios\n//     .get(url)\n//     .then( res => res.data.country)\n//     .catch(e => 'israel')\n// }\n\nRouter.events.on('routeChangeComplete', url => gtag.pageview(url))\n\nconst lightTheme = () => ({\n  ...themes['common'],\n  ...themes['light'],\n})\n\nconst darkTheme = () => ({\n  ...themes['common'],\n  ...themes['dark'],\n})\n\n\nfunction MyApp ({ Component, pageProps, newProxy }) {\n\n  const [theme, setTheme] = useState(lightTheme())\n  const [isHeb, setHeb] = useState(newProxy && newProxy.countryName.toLowerCase() === 'israel' ? true : false)\n  const [menuOpen, setOpen] = useState(false)\n\n  const closeMenu     = () => setOpen(false)\n  const toggleMenu    = () => setOpen(!menuOpen)\n  const toggleLang    = () => {closeMenu(), setHeb(!isHeb)}\n  const setDarkTheme  = () => {closeMenu(), setTheme(darkTheme())}\n  const setLightTheme = () => {closeMenu(), setTheme(lightTheme())}\n\n  const node          = useRef()\n  useOutSide(node, closeMenu)\n\n  const displayLang   = isHeb ? 'English' : 'עברית'\n  const isLight       = theme.type === 'light'\n\n  return (\n    <ProxyContextProvider>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle isHeb={isHeb}/>\n\n        <Header title='nCorona' isHeb={isHeb} >\n          <div ref={node}>\n            <Burger setOpen={toggleMenu} open={menuOpen} />\n            <Menu setOpen={toggleMenu} open={menuOpen} >\n\n              <Link href=\"/News\">\n                <a alt=\"news\" onClick={() => closeMenu()}>\n                  <span>&#128240;</span>\n                  { isHeb && 'חדשות' || 'News' }\n                </a>\n              </Link>\n\n              <Link href=\"/Statistics\">\n                <a alt=\"stats\" onClick={() => closeMenu()}>\n                  <span>\t&#128506;</span>\n                  { isHeb && 'נתונים' || 'Data' }\n                </a>\n              </Link>\n\n              <Link href=\"/About\">\n                <a alt=\"about\" onClick={() => closeMenu()}>\n                  <span>\t&#128506;</span>\n                  { isHeb && 'אודות' || 'About' }\n                </a>\n              </Link>\n\n      {/*\n      // This is Night Mode.. Currently disabled\n              <a onClick={isLight ?setDarkTheme : setLightTheme}>\n                <span>{ isLight ? '🌒' : '🌞'}</span>\n                {\n                  isLight\n                  ? (isHeb && 'מצב לילה' || 'Dark Mode')\n                  : (isHeb && 'מצב יום' || 'Light Mode')\n                }\n              </a>\n      */}\n\n              <a onClick={toggleLang}>\n                <span>&#127760;</span>\n                {displayLang}\n              </a>\n\n            </Menu>\n          </div>\n\n        </Header>\n        <ProxyView />\n        <Component {...pageProps} isHeb={isHeb} newProxy={newProxy} />\n      </ThemeProvider>\n    </ProxyContextProvider>\n  )\n}\n\n\nMyApp.getInitialProps = async (appContext) => {\n  const appProps = await App.getInitialProps(appContext)\n  let newProxy = null\n  let proxyUrl\n\n  if (appContext.ctx && appContext.ctx.req) {\n    // grab client's ip address\n    const ipAddress = appContext.ctx.req.headers['x-forwarded-for'] || appContext.ctx.req.connection.remoteAddress\n    const localAddresses = ['::1', '127.0.0.1', 'localhost']\n    // Construct URL with IP ADDRESS\n    if (!localAddresses.includes(ipAddress)) {\n      proxyUrl = `https://extreme-ip-lookup.com/json/${ipAddress}`\n    }\n    try {\n      const countryName = await currentCountry(proxyUrl)\n      const newProxy = { countryName, ipAddress }\n      return { newProxy, ...appProps }\n    } catch(e) {\n      return { errorCode: e.code, errorMessage: e.message, ...appProps }\n    }\n  }\n  return { ...appProps, newProxy: null }\n}\n\nexport default MyApp\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AACA;AAKA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;AAAA;AACA;AADA;AAcA;AACA;AAAA;AAAA;AAAA;AAfA;AAgBA;AAhBA;AACA;AADA;AAAA;AAAA;AAAA;AAkBA;AAAA;AAlBA;AACA;AADA;AAAA;AAqBA;AArBA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAuBA;;;;A","sourceRoot":""}